!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=335)}([function(t,n,r){var e=r(1),o=r(7),i=r(15),u=r(11),c=r(18),a=function(t,n,r){var s,f,l,h,p=t&a.F,v=t&a.G,d=t&a.S,g=t&a.P,y=t&a.B,m=v?e:d?e[n]||(e[n]={}):(e[n]||{}).prototype,x=v?o:o[n]||(o[n]={}),b=x.prototype||(x.prototype={});for(s in v&&(r=n),r)l=((f=!p&&m&&void 0!==m[s])?m:r)[s],h=y&&f?c(l,e):g&&"function"==typeof l?c(Function.call,l):l,m&&u(m,s,l,t&a.U),x[s]!=l&&i(x,s,h),g&&b[s]!=l&&(b[s]=l)};e.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,r){var e=r(4);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(49)("wks"),o=r(30),i=r(1).Symbol,u="function"==typeof i;(t.exports=function(t){return e[t]||(e[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=e},function(t,n,r){var e=r(20),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,n){var r=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=r)},function(t,n,r){t.exports=!r(2)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,n,r){var e=r(3),o=r(91),i=r(27),u=Object.defineProperty;n.f=r(8)?Object.defineProperty:function(t,n,r){if(e(t),n=i(n,!0),e(r),o)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){var e=r(25);t.exports=function(t){return Object(e(t))}},function(t,n,r){var e=r(1),o=r(15),i=r(14),u=r(30)("src"),c=r(135),a=(""+c).split("toString");r(7).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,c){var s="function"==typeof r;s&&(i(r,"name")||o(r,"name",n)),t[n]!==r&&(s&&(i(r,u)||o(r,u,t[n]?""+t[n]:a.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:o(t,n,r):(delete t[n],o(t,n,r)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[u]||c.call(this)}))},function(t,n,r){var e=r(0),o=r(2),i=r(25),u=/"/g,c=function(t,n,r,e){var o=String(i(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+o+"</"+n+">"};t.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*o((function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3})),"String",r)}},function(t,n,r){"use strict";var e=r(124),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function u(t){return void 0===t}function c(t){return null!==t&&"object"==typeof t}function a(t){if("[object Object]"!==o.call(t))return!1;var n=Object.getPrototypeOf(t);return null===n||n===Object.prototype}function s(t){return"[object Function]"===o.call(t)}function f(t,n){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var r=0,e=t.length;r<e;r++)n.call(null,t[r],r,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&n.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!u(t)&&null!==t.constructor&&!u(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:c,isPlainObject:a,isUndefined:u,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:s,isStream:function(t){return c(t)&&s(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:f,merge:function t(){var n={};function r(r,e){a(n[e])&&a(r)?n[e]=t(n[e],r):a(r)?n[e]=t({},r):i(r)?n[e]=r.slice():n[e]=r}for(var e=0,o=arguments.length;e<o;e++)f(arguments[e],r);return n},extend:function(t,n,r){return f(n,(function(n,o){t[o]=r&&"function"==typeof n?e(n,r):n})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n,r){var e=r(9),o=r(29);t.exports=r(8)?function(t,n,r){return e.f(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n,r){var e=r(45),o=r(25);t.exports=function(t){return e(o(t))}},function(t,n,r){"use strict";var e=r(2);t.exports=function(t,n){return!!t&&e((function(){n?t.call(null,(function(){}),1):t.call(null)}))}},function(t,n,r){var e=r(19);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(46),o=r(29),i=r(16),u=r(27),c=r(14),a=r(91),s=Object.getOwnPropertyDescriptor;n.f=r(8)?s:function(t,n){if(t=i(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return o(!e.f.call(t,n),t[n])}},function(t,n,r){var e=r(0),o=r(7),i=r(2);t.exports=function(t,n){var r=(o.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*i((function(){r(1)})),"Object",u)}},function(t,n,r){var e=r(18),o=r(45),i=r(10),u=r(6),c=r(107);t.exports=function(t,n){var r=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var d,g,y=i(n),m=o(y),x=e(c,v,3),b=u(m.length),w=0,S=r?p(n,b):a?p(n,0):void 0;b>w;w++)if((h||w in m)&&(g=x(d=m[w],w,y),t))if(r)S[w]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return w;case 2:S.push(d)}else if(f)return!1;return l?-1:s||f?f:S}}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,r){"use strict";if(r(8)){var e=r(31),o=r(1),i=r(2),u=r(0),c=r(60),a=r(86),s=r(18),f=r(43),l=r(29),h=r(15),p=r(44),v=r(20),d=r(6),g=r(118),y=r(33),m=r(27),x=r(14),b=r(47),w=r(4),S=r(10),_=r(78),E=r(34),O=r(36),P=r(35).f,A=r(80),j=r(30),F=r(5),M=r(23),T=r(50),N=r(48),R=r(82),I=r(41),L=r(53),k=r(42),C=r(81),D=r(109),B=r(9),U=r(21),W=B.f,V=U.f,q=o.RangeError,G=o.TypeError,z=o.Uint8Array,H=Array.prototype,Y=a.ArrayBuffer,$=a.DataView,X=M(0),J=M(2),K=M(3),Z=M(4),Q=M(5),tt=M(6),nt=T(!0),rt=T(!1),et=R.values,ot=R.keys,it=R.entries,ut=H.lastIndexOf,ct=H.reduce,at=H.reduceRight,st=H.join,ft=H.sort,lt=H.slice,ht=H.toString,pt=H.toLocaleString,vt=F("iterator"),dt=F("toStringTag"),gt=j("typed_constructor"),yt=j("def_constructor"),mt=c.CONSTR,xt=c.TYPED,bt=c.VIEW,wt=M(1,(function(t,n){return Pt(N(t,t[yt]),n)})),St=i((function(){return 1===new z(new Uint16Array([1]).buffer)[0]})),_t=!!z&&!!z.prototype.set&&i((function(){new z(1).set({})})),Et=function(t,n){var r=v(t);if(r<0||r%n)throw q("Wrong offset!");return r},Ot=function(t){if(w(t)&&xt in t)return t;throw G(t+" is not a typed array!")},Pt=function(t,n){if(!(w(t)&&gt in t))throw G("It is not a typed array constructor!");return new t(n)},At=function(t,n){return jt(N(t,t[yt]),n)},jt=function(t,n){for(var r=0,e=n.length,o=Pt(t,e);e>r;)o[r]=n[r++];return o},Ft=function(t,n,r){W(t,n,{get:function(){return this._d[r]}})},Mt=function(t){var n,r,e,o,i,u,c=S(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=A(c);if(null!=h&&!_(h)){for(u=h.call(c),e=[],n=0;!(i=u.next()).done;n++)e.push(i.value);c=e}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,r=d(c.length),o=Pt(this,r);r>n;n++)o[n]=l?f(c[n],n):c[n];return o},Tt=function(){for(var t=0,n=arguments.length,r=Pt(this,n);n>t;)r[t]=arguments[t++];return r},Nt=!!z&&i((function(){pt.call(new z(1))})),Rt=function(){return pt.apply(Nt?lt.call(Ot(this)):Ot(this),arguments)},It={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return At(this,J(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return wt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,r=Math.floor(n/2),e=0;e<r;)t=this[e],this[e++]=this[--n],this[n]=t;return this},some:function(t){return K(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var r=Ot(this),e=r.length,o=y(t,e);return new(N(r,r[yt]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,d((void 0===n?e:y(n,e))-o))}},Lt=function(t,n){return At(this,lt.call(Ot(this),t,n))},kt=function(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=S(t),o=d(e.length),i=0;if(o+n>r)throw q("Wrong length!");for(;i<o;)this[n+i]=e[i++]},Ct={entries:function(){return it.call(Ot(this))},keys:function(){return ot.call(Ot(this))},values:function(){return et.call(Ot(this))}},Dt=function(t,n){return w(t)&&t[xt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Bt=function(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):V(t,n)},Ut=function(t,n,r){return!(Dt(t,n=m(n,!0))&&w(r)&&x(r,"value"))||x(r,"get")||x(r,"set")||r.configurable||x(r,"writable")&&!r.writable||x(r,"enumerable")&&!r.enumerable?W(t,n,r):(t[n]=r.value,t)};mt||(U.f=Bt,B.f=Ut),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:Ut}),i((function(){ht.call({})}))&&(ht=pt=function(){return st.call(this)});var Wt=p({},It);p(Wt,Ct),h(Wt,vt,Ct.values),p(Wt,{slice:Lt,set:kt,constructor:function(){},toString:ht,toLocaleString:Rt}),Ft(Wt,"buffer","b"),Ft(Wt,"byteOffset","o"),Ft(Wt,"byteLength","l"),Ft(Wt,"length","e"),W(Wt,dt,{get:function(){return this[xt]}}),t.exports=function(t,n,r,a){var s=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,p="set"+t,v=o[s],y=v||{},m=v&&O(v),x=!v||!c.ABV,S={},_=v&&v.prototype,A=function(t,r){W(t,r,{get:function(){return function(t,r){var e=t._d;return e.v[l](r*n+e.o,St)}(this,r)},set:function(t){return function(t,r,e){var o=t._d;a&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),o.v[p](r*n+o.o,e,St)}(this,r,t)},enumerable:!0})};x?(v=r((function(t,r,e,o){f(t,v,s,"_d");var i,u,c,a,l=0,p=0;if(w(r)){if(!(r instanceof Y||"ArrayBuffer"==(a=b(r))||"SharedArrayBuffer"==a))return xt in r?jt(v,r):Mt.call(v,r);i=r,p=Et(e,n);var y=r.byteLength;if(void 0===o){if(y%n)throw q("Wrong length!");if((u=y-p)<0)throw q("Wrong length!")}else if((u=d(o)*n)+p>y)throw q("Wrong length!");c=u/n}else c=g(r),i=new Y(u=c*n);for(h(t,"_d",{b:i,o:p,l:u,e:c,v:new $(i)});l<c;)A(t,l++)})),_=v.prototype=E(Wt),h(_,"constructor",v)):i((function(){v(1)}))&&i((function(){new v(-1)}))&&L((function(t){new v,new v(null),new v(1.5),new v(t)}),!0)||(v=r((function(t,r,e,o){var i;return f(t,v,s),w(r)?r instanceof Y||"ArrayBuffer"==(i=b(r))||"SharedArrayBuffer"==i?void 0!==o?new y(r,Et(e,n),o):void 0!==e?new y(r,Et(e,n)):new y(r):xt in r?jt(v,r):Mt.call(v,r):new y(g(r))})),X(m!==Function.prototype?P(y).concat(P(m)):P(y),(function(t){t in v||h(v,t,y[t])})),v.prototype=_,e||(_.constructor=v));var j=_[vt],F=!!j&&("values"==j.name||null==j.name),M=Ct.values;h(v,gt,!0),h(_,xt,s),h(_,bt,!0),h(_,yt,v),(a?new v(1)[dt]==s:dt in _)||W(_,dt,{get:function(){return s}}),S[s]=v,u(u.G+u.W+u.F*(v!=y),S),u(u.S,s,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*i((function(){y.of.call(v,1)})),s,{from:Mt,of:Tt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,s,It),k(s),u(u.P+u.F*_t,s,{set:kt}),u(u.P+u.F*!F,s,Ct),e||_.toString==ht||(_.toString=ht),u(u.P+u.F*i((function(){new v(1).slice()})),s,{slice:Lt}),u(u.P+u.F*(i((function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()}))||!i((function(){_.toLocaleString.call([1,2])}))),s,{toLocaleString:Rt}),I[s]=F?j:M,e||F||h(_,vt,M)}}else t.exports=function(){}},function(t,n,r){var e=r(4);t.exports=function(t,n){if(!e(t))return t;var r,o;if(n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!e(o=r.call(t)))return o;if(!n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,r){var e=r(30)("meta"),o=r(4),i=r(14),u=r(9).f,c=0,a=Object.isExtensible||function(){return!0},s=!r(2)((function(){return a(Object.preventExtensions({}))})),f=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,e)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[e].i},getWeak:function(t,n){if(!i(t,e)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[e].w},onFreeze:function(t){return s&&l.NEED&&a(t)&&!i(t,e)&&f(t),t}}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n){t.exports=!1},function(t,n,r){var e=r(93),o=r(65);t.exports=Object.keys||function(t){return e(t,o)}},function(t,n,r){var e=r(20),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=e(t))<0?o(t+n,0):i(t,n)}},function(t,n,r){var e=r(3),o=r(94),i=r(65),u=r(64)("IE_PROTO"),c=function(){},a=function(){var t,n=r(62)("iframe"),e=i.length;for(n.style.display="none",r(66).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;e--;)delete a.prototype[i[e]];return a()};t.exports=Object.create||function(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===n?r:o(r,n)}},function(t,n,r){var e=r(93),o=r(65).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},function(t,n,r){var e=r(14),o=r(10),i=r(64)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),e(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,r){var e=r(5)("unscopables"),o=Array.prototype;null==o[e]&&r(15)(o,e,{}),t.exports=function(t){o[e][t]=!0}},function(t,n,r){var e=r(4);t.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,r){var e=r(9).f,o=r(14),i=r(5)("toStringTag");t.exports=function(t,n,r){t&&!o(t=r?t:t.prototype,i)&&e(t,i,{configurable:!0,value:n})}},function(t,n,r){var e=r(0),o=r(25),i=r(2),u=r(68),c="["+u+"]",a=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),f=function(t,n,r){var o={},c=i((function(){return!!u[t]()||"​"!="​"[t]()})),a=o[t]=c?n(l):u[t];r&&(o[r]=a),e(e.P+e.F*c,"String",o)},l=f.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,r){"use strict";var e=r(1),o=r(9),i=r(8),u=r(5)("species");t.exports=function(t){var n=e[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,n,r){var e=r(11);t.exports=function(t,n,r){for(var o in n)e(t,o,n[o],r);return t}},function(t,n,r){var e=r(24);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,r){var e=r(24),o=r(5)("toStringTag"),i="Arguments"==e(function(){return arguments}());t.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?r:i?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,r){var e=r(3),o=r(19),i=r(5)("species");t.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||null==(r=e(u)[i])?n:o(r)}},function(t,n,r){var e=r(7),o=r(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:e.version,mode:r(31)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,r){var e=r(16),o=r(6),i=r(33);t.exports=function(t){return function(n,r,u){var c,a=e(n),s=o(a.length),f=i(u,s);if(t&&r!=r){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===r)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,r){var e=r(24);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n,r){var e=r(5)("iterator"),o=!1;try{var i=[7][e]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var r=!1;try{var i=[7],u=i[e]();u.next=function(){return{done:r=!0}},i[e]=function(){return u},t(i)}catch(t){}return r}},function(t,n,r){"use strict";var e=r(3);t.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,r){"use strict";var e=r(47),o=RegExp.prototype.exec;t.exports=function(t,n){var r=t.exec;if("function"==typeof r){var i=r.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==e(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,r){"use strict";r(111);var e=r(11),o=r(15),i=r(2),u=r(25),c=r(5),a=r(83),s=c("species"),f=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,n,r){var h=c(t),p=!i((function(){var n={};return n[h]=function(){return 7},7!=""[t](n)})),v=p?!i((function(){var n=!1,r=/a/;return r.exec=function(){return n=!0,null},"split"===t&&(r.constructor={},r.constructor[s]=function(){return r}),r[h](""),!n})):void 0;if(!p||!v||"replace"===t&&!f||"split"===t&&!l){var d=/./[h],g=r(u,h,""[t],(function(t,n,r,e,o){return n.exec===a?p&&!o?{done:!0,value:d.call(n,r,e)}:{done:!0,value:t.call(r,n,e)}:{done:!1}})),y=g[0],m=g[1];e(String.prototype,t,y),o(RegExp.prototype,h,2==n?function(t,n){return m.call(t,this,n)}:function(t){return m.call(t,this)})}}},function(t,n,r){var e=r(18),o=r(106),i=r(78),u=r(3),c=r(6),a=r(80),s={},f={};(n=t.exports=function(t,n,r,l,h){var p,v,d,g,y=h?function(){return t}:a(t),m=e(r,l,n?2:1),x=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(p=c(t.length);p>x;x++)if((g=n?m(u(v=t[x])[0],v[1]):m(t[x]))===s||g===f)return g}else for(d=y.call(t);!(v=d.next()).done;)if((g=o(d,m,v.value,n))===s||g===f)return g}).BREAK=s,n.RETURN=f},function(t,n,r){var e=r(1).navigator;t.exports=e&&e.userAgent||""},function(t,n,r){"use strict";var e=r(1),o=r(0),i=r(11),u=r(44),c=r(28),a=r(57),s=r(43),f=r(4),l=r(2),h=r(53),p=r(39),v=r(69);t.exports=function(t,n,r,d,g,y){var m=e[t],x=m,b=g?"set":"add",w=x&&x.prototype,S={},_=function(t){var n=w[t];i(w,t,"delete"==t?function(t){return!(y&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof x&&(y||w.forEach&&!l((function(){(new x).entries().next()})))){var E=new x,O=E[b](y?{}:-0,1)!=E,P=l((function(){E.has(1)})),A=h((function(t){new x(t)})),j=!y&&l((function(){for(var t=new x,n=5;n--;)t[b](n,n);return!t.has(-0)}));A||((x=n((function(n,r){s(n,x,t);var e=v(new m,n,x);return null!=r&&a(r,g,e[b],e),e}))).prototype=w,w.constructor=x),(P||j)&&(_("delete"),_("has"),g&&_("get")),(j||O)&&_(b),y&&w.clear&&delete w.clear}else x=d.getConstructor(n,t,g,b),u(x.prototype,r),c.NEED=!0;return p(x,t),S[t]=x,o(o.G+o.W+o.F*(x!=m),S),y||d.setStrong(x,t,g),x}},function(t,n,r){for(var e,o=r(1),i=r(15),u=r(30),c=u("typed_array"),a=u("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=o[h[l++]])?(i(e.prototype,c,!0),i(e.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,r){t.exports=r(317)},function(t,n,r){var e=r(4),o=r(1).document,i=e(o)&&e(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,r){n.f=r(5)},function(t,n,r){var e=r(49)("keys"),o=r(30);t.exports=function(t){return e[t]||(e[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,r){var e=r(1).document;t.exports=e&&e.documentElement},function(t,n,r){var e=r(4),o=r(3),i=function(t,n){if(o(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,e){try{(e=r(18)(Function.call,r(21).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,r){return i(t,r),n?t.__proto__=r:e(t,r),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,r){var e=r(4),o=r(67).set;t.exports=function(t,n,r){var i,u=n.constructor;return u!==r&&"function"==typeof u&&(i=u.prototype)!==r.prototype&&e(i)&&o&&o(t,i),t}},function(t,n,r){"use strict";var e=r(20),o=r(25);t.exports=function(t){var n=String(o(this)),r="",i=e(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(r+=n);return r}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,n,r){var e=r(20),o=r(25);t.exports=function(t){return function(n,r){var i,u,c=String(o(n)),a=e(r),s=c.length;return a<0||a>=s?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,n,r){"use strict";var e=r(31),o=r(0),i=r(11),u=r(15),c=r(41),a=r(105),s=r(39),f=r(36),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,r,v,d,g,y){a(r,n,v);var m,x,b,w=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=n+" Iterator",_="values"==d,E=!1,O=t.prototype,P=O[l]||O["@@iterator"]||d&&O[d],A=P||w(d),j=d?_?w("entries"):A:void 0,F="Array"==n&&O.entries||P;if(F&&(b=f(F.call(new t)))!==Object.prototype&&b.next&&(s(b,S,!0),e||"function"==typeof b[l]||u(b,l,p)),_&&P&&"values"!==P.name&&(E=!0,A=function(){return P.call(this)}),e&&!y||!h&&!E&&O[l]||u(O,l,A),c[n]=A,c[S]=p,d)if(m={values:_?A:w("values"),keys:g?A:w("keys"),entries:j},y)for(x in m)x in O||i(O,x,m[x]);else o(o.P+o.F*(h||E),n,m);return m}},function(t,n,r){var e=r(76),o=r(25);t.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(t))}},function(t,n,r){var e=r(4),o=r(24),i=r(5)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,r){var e=r(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,r){var e=r(41),o=r(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(e.Array===t||i[o]===t)}},function(t,n,r){"use strict";var e=r(9),o=r(29);t.exports=function(t,n,r){n in t?e.f(t,n,o(0,r)):t[n]=r}},function(t,n,r){var e=r(47),o=r(5)("iterator"),i=r(41);t.exports=r(7).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[e(t)]}},function(t,n,r){"use strict";var e=r(10),o=r(33),i=r(6);t.exports=function(t){for(var n=e(this),r=i(n.length),u=arguments.length,c=o(u>1?arguments[1]:void 0,r),a=u>2?arguments[2]:void 0,s=void 0===a?r:o(a,r);s>c;)n[c++]=t;return n}},function(t,n,r){"use strict";var e=r(37),o=r(110),i=r(41),u=r(16);t.exports=r(74)(Array,"Array",(function(t,n){this._t=u(t),this._i=0,this._k=n}),(function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])}),"values"),i.Arguments=i.Array,e("keys"),e("values"),e("entries")},function(t,n,r){"use strict";var e,o,i=r(54),u=RegExp.prototype.exec,c=String.prototype.replace,a=u,s=(e=/a/,o=/b*/g,u.call(e,"a"),u.call(o,"a"),0!==e.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(a=function(t){var n,r,e,o,a=this;return f&&(r=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),s&&(n=a.lastIndex),e=u.call(a,t),s&&e&&(a.lastIndex=a.global?e.index+e[0].length:n),f&&e&&e.length>1&&c.call(e[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(e[o]=void 0)})),e}),t.exports=a},function(t,n,r){"use strict";var e=r(73)(!0);t.exports=function(t,n,r){return n+(r?e(t,n).length:1)}},function(t,n,r){var e,o,i,u=r(18),c=r(99),a=r(66),s=r(62),f=r(1),l=f.process,h=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,d=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var n=y[t];delete y[t],n()}},x=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return y[++g]=function(){c("function"==typeof t?t:Function(t),n)},e(g),g},p=function(t){delete y[t]},"process"==r(24)(l)?e=function(t){l.nextTick(u(m,t,1))}:d&&d.now?e=function(t){d.now(u(m,t,1))}:v?(i=(o=new v).port2,o.port1.onmessage=x,e=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(e=function(t){f.postMessage(t+"","*")},f.addEventListener("message",x,!1)):e="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,r){"use strict";var e=r(1),o=r(8),i=r(31),u=r(60),c=r(15),a=r(44),s=r(2),f=r(43),l=r(20),h=r(6),p=r(118),v=r(35).f,d=r(9).f,g=r(81),y=r(39),m=e.ArrayBuffer,x=e.DataView,b=e.Math,w=e.RangeError,S=e.Infinity,_=m,E=b.abs,O=b.pow,P=b.floor,A=b.log,j=b.LN2,F=o?"_b":"buffer",M=o?"_l":"byteLength",T=o?"_o":"byteOffset";function N(t,n,r){var e,o,i,u=new Array(r),c=8*r-n-1,a=(1<<c)-1,s=a>>1,f=23===n?O(2,-24)-O(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(o=t!=t?1:0,e=a):(e=P(A(t)/j),t*(i=O(2,-e))<1&&(e--,i*=2),(t+=e+s>=1?f/i:f*O(2,1-s))*i>=2&&(e++,i/=2),e+s>=a?(o=0,e=a):e+s>=1?(o=(t*i-1)*O(2,n),e+=s):(o=t*O(2,s-1)*O(2,n),e=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(e=e<<n|o,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function R(t,n,r){var e,o=8*r-n-1,i=(1<<o)-1,u=i>>1,c=o-7,a=r-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(e=f&(1<<-c)-1,f>>=-c,c+=n;c>0;e=256*e+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===i)return e?NaN:s?-S:S;e+=O(2,n),f-=u}return(s?-1:1)*e*O(2,f-n)}function I(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function k(t){return[255&t,t>>8&255]}function C(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return N(t,52,8)}function B(t){return N(t,23,4)}function U(t,n,r){d(t.prototype,n,{get:function(){return this[r]}})}function W(t,n,r,e){var o=p(+r);if(o+n>t[M])throw w("Wrong index!");var i=t[F]._b,u=o+t[T],c=i.slice(u,u+n);return e?c:c.reverse()}function V(t,n,r,e,o,i){var u=p(+r);if(u+n>t[M])throw w("Wrong index!");for(var c=t[F]._b,a=u+t[T],s=e(+o),f=0;f<n;f++)c[a+f]=s[i?f:n-f-1]}if(u.ABV){if(!s((function(){m(1)}))||!s((function(){new m(-1)}))||s((function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name}))){for(var q,G=(m=function(t){return f(this,m),new _(p(t))}).prototype=_.prototype,z=v(_),H=0;z.length>H;)(q=z[H++])in m||c(m,q,_[q]);i||(G.constructor=m)}var Y=new x(new m(2)),$=x.prototype.setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||a(x.prototype,{setInt8:function(t,n){$.call(this,t,n<<24>>24)},setUint8:function(t,n){$.call(this,t,n<<24>>24)}},!0)}else m=function(t){f(this,m,"ArrayBuffer");var n=p(t);this._b=g.call(new Array(n),0),this[M]=n},x=function(t,n,r){f(this,x,"DataView"),f(t,m,"DataView");var e=t[M],o=l(n);if(o<0||o>e)throw w("Wrong offset!");if(o+(r=void 0===r?e-o:h(r))>e)throw w("Wrong length!");this[F]=t,this[T]=o,this[M]=r},o&&(U(m,"byteLength","_l"),U(x,"buffer","_b"),U(x,"byteLength","_l"),U(x,"byteOffset","_o")),a(x.prototype,{getInt8:function(t){return W(this,1,t)[0]<<24>>24},getUint8:function(t){return W(this,1,t)[0]},getInt16:function(t){var n=W(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=W(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return I(W(this,4,t,arguments[1]))},getUint32:function(t){return I(W(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(W(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(W(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){V(this,1,t,L,n)},setUint8:function(t,n){V(this,1,t,L,n)},setInt16:function(t,n){V(this,2,t,k,n,arguments[2])},setUint16:function(t,n){V(this,2,t,k,n,arguments[2])},setInt32:function(t,n){V(this,4,t,C,n,arguments[2])},setUint32:function(t,n){V(this,4,t,C,n,arguments[2])},setFloat32:function(t,n){V(this,4,t,B,n,arguments[2])},setFloat64:function(t,n){V(this,8,t,D,n,arguments[2])}});y(m,"ArrayBuffer"),y(x,"DataView"),c(x.prototype,u.VIEW,!0),n.ArrayBuffer=m,n.DataView=x},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){t.exports=!r(123)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,n,r){"use strict";r(132);var e,o=(e=r(304))&&e.__esModule?e:{default:e};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(t,n,r){t.exports=!r(8)&&!r(2)((function(){return 7!=Object.defineProperty(r(62)("div"),"a",{get:function(){return 7}}).a}))},function(t,n,r){var e=r(1),o=r(7),i=r(31),u=r(63),c=r(9).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,r){var e=r(14),o=r(16),i=r(50)(!1),u=r(64)("IE_PROTO");t.exports=function(t,n){var r,c=o(t),a=0,s=[];for(r in c)r!=u&&e(c,r)&&s.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~i(s,r)||s.push(r));return s}},function(t,n,r){var e=r(9),o=r(3),i=r(32);t.exports=r(8)?Object.defineProperties:function(t,n){o(t);for(var r,u=i(n),c=u.length,a=0;c>a;)e.f(t,r=u[a++],n[r]);return t}},function(t,n,r){var e=r(16),o=r(35).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(e(t))}},function(t,n,r){"use strict";var e=r(8),o=r(32),i=r(51),u=r(46),c=r(10),a=r(45),s=Object.assign;t.exports=!s||r(2)((function(){var t={},n={},r=Symbol(),e="abcdefghijklmnopqrst";return t[r]=7,e.split("").forEach((function(t){n[t]=t})),7!=s({},t)[r]||Object.keys(s({},n)).join("")!=e}))?function(t,n){for(var r=c(t),s=arguments.length,f=1,l=i.f,h=u.f;s>f;)for(var p,v=a(arguments[f++]),d=l?o(v).concat(l(v)):o(v),g=d.length,y=0;g>y;)p=d[y++],e&&!h.call(v,p)||(r[p]=v[p]);return r}:s},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,r){"use strict";var e=r(19),o=r(4),i=r(99),u=[].slice,c={},a=function(t,n,r){if(!(n in c)){for(var e=[],o=0;o<n;o++)e[o]="a["+o+"]";c[n]=Function("F,a","return new F("+e.join(",")+")")}return c[n](t,r)};t.exports=Function.bind||function(t){var n=e(this),r=u.call(arguments,1),c=function(){var e=r.concat(u.call(arguments));return this instanceof c?a(n,e.length,e):i(n,e,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},function(t,n,r){var e=r(1).parseInt,o=r(40).trim,i=r(68),u=/^[-+]?0[xX]/;t.exports=8!==e(i+"08")||22!==e(i+"0x16")?function(t,n){var r=o(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},function(t,n,r){var e=r(1).parseFloat,o=r(40).trim;t.exports=1/e(r(68)+"-0")!=-1/0?function(t){var n=o(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},function(t,n,r){var e=r(24);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=e(t))throw TypeError(n);return+t}},function(t,n,r){var e=r(4),o=Math.floor;t.exports=function(t){return!e(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,r){"use strict";var e=r(34),o=r(29),i=r(39),u={};r(15)(u,r(5)("iterator"),(function(){return this})),t.exports=function(t,n,r){t.prototype=e(u,{next:o(1,r)}),i(t,n+" Iterator")}},function(t,n,r){var e=r(3);t.exports=function(t,n,r,o){try{return o?n(e(r)[0],r[1]):n(r)}catch(n){var i=t.return;throw void 0!==i&&e(i.call(t)),n}}},function(t,n,r){var e=r(225);t.exports=function(t,n){return new(e(t))(n)}},function(t,n,r){var e=r(19),o=r(10),i=r(45),u=r(6);t.exports=function(t,n,r,c,a){e(n);var s=o(t),f=i(s),l=u(s.length),h=a?l-1:0,p=a?-1:1;if(r<2)for(;;){if(h in f){c=f[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,r){"use strict";var e=r(10),o=r(33),i=r(6);t.exports=[].copyWithin||function(t,n){var r=e(this),u=i(r.length),c=o(t,u),a=o(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:o(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in r?r[c]=r[a]:delete r[c],c+=l,a+=l;return r}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,r){"use strict";var e=r(83);r(0)({target:"RegExp",proto:!0,forced:e!==/./.exec},{exec:e})},function(t,n,r){r(8)&&"g"!=/./g.flags&&r(9).f(RegExp.prototype,"flags",{configurable:!0,get:r(54)})},function(t,n,r){"use strict";var e,o,i,u,c=r(31),a=r(1),s=r(18),f=r(47),l=r(0),h=r(4),p=r(19),v=r(43),d=r(57),g=r(48),y=r(85).set,m=r(245)(),x=r(114),b=r(246),w=r(58),S=r(115),_=a.TypeError,E=a.process,O=E&&E.versions,P=O&&O.v8||"",A=a.Promise,j="process"==f(E),F=function(){},M=o=x.f,T=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[r(5)("species")]=function(t){t(F,F)};return(j||"function"==typeof PromiseRejectionEvent)&&t.then(F)instanceof n&&0!==P.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},R=function(t,n){if(!t._n){t._n=!0;var r=t._c;m((function(){for(var e=t._v,o=1==t._s,i=0,u=function(n){var r,i,u,c=o?n.ok:n.fail,a=n.resolve,s=n.reject,f=n.domain;try{c?(o||(2==t._h&&k(t),t._h=1),!0===c?r=e:(f&&f.enter(),r=c(e),f&&(f.exit(),u=!0)),r===n.promise?s(_("Promise-chain cycle")):(i=N(r))?i.call(r,a,s):a(r)):s(e)}catch(t){f&&!u&&f.exit(),s(t)}};r.length>i;)u(r[i++]);t._c=[],t._n=!1,n&&!t._h&&I(t)}))}},I=function(t){y.call(a,(function(){var n,r,e,o=t._v,i=L(t);if(i&&(n=b((function(){j?E.emit("unhandledRejection",o,t):(r=a.onunhandledrejection)?r({promise:t,reason:o}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",o)})),t._h=j||L(t)?2:1),t._a=void 0,i&&n.e)throw n.v}))},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},k=function(t){y.call(a,(function(){var n;j?E.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})}))},C=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),R(n,!0))},D=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw _("Promise can't be resolved itself");(n=N(t))?m((function(){var e={_w:r,_d:!1};try{n.call(t,s(D,e,1),s(C,e,1))}catch(t){C.call(e,t)}})):(r._v=t,r._s=1,R(r,!1))}catch(t){C.call({_w:r,_d:!1},t)}}};T||(A=function(t){v(this,A,"Promise","_h"),p(t),e.call(this);try{t(s(D,this,1),s(C,this,1))}catch(t){C.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(44)(A.prototype,{then:function(t,n){var r=M(g(this,A));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=j?E.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&R(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new e;this.promise=t,this.resolve=s(D,t,1),this.reject=s(C,t,1)},x.f=M=function(t){return t===A||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!T,{Promise:A}),r(39)(A,"Promise"),r(42)("Promise"),u=r(7).Promise,l(l.S+l.F*!T,"Promise",{reject:function(t){var n=M(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!T),"Promise",{resolve:function(t){return S(c&&this===u?A:this,t)}}),l(l.S+l.F*!(T&&r(53)((function(t){A.all(t).catch(F)}))),"Promise",{all:function(t){var n=this,r=M(n),e=r.resolve,o=r.reject,i=b((function(){var r=[],i=0,u=1;d(t,!1,(function(t){var c=i++,a=!1;r.push(void 0),u++,n.resolve(t).then((function(t){a||(a=!0,r[c]=t,--u||e(r))}),o)})),--u||e(r)}));return i.e&&o(i.v),r.promise},race:function(t){var n=this,r=M(n),e=r.reject,o=b((function(){d(t,!1,(function(t){n.resolve(t).then(r.resolve,e)}))}));return o.e&&e(o.v),r.promise}})},function(t,n,r){"use strict";var e=r(19);function o(t){var n,r;this.promise=new t((function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e})),this.resolve=e(n),this.reject=e(r)}t.exports.f=function(t){return new o(t)}},function(t,n,r){var e=r(3),o=r(4),i=r(114);t.exports=function(t,n){if(e(t),o(n)&&n.constructor===t)return n;var r=i.f(t);return(0,r.resolve)(n),r.promise}},function(t,n,r){"use strict";var e=r(9).f,o=r(34),i=r(44),u=r(18),c=r(43),a=r(57),s=r(74),f=r(110),l=r(42),h=r(8),p=r(28).fastKey,v=r(38),d=h?"_s":"size",g=function(t,n){var r,e=p(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};t.exports={getConstructor:function(t,n,r,s){var f=t((function(t,e){c(t,f,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[d]=0,null!=e&&a(e,r,t[s],t)}));return i(f.prototype,{clear:function(){for(var t=v(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,n),e=g(r,t);if(e){var o=e.n,i=e.p;delete r._i[e.i],e.r=!0,i&&(i.n=o),o&&(o.p=i),r._f==e&&(r._f=o),r._l==e&&(r._l=i),r[d]--}return!!e},forEach:function(t){v(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(v(this,n),t)}}),h&&e(f.prototype,"size",{get:function(){return v(this,n)[d]}}),f},def:function(t,n,r){var e,o,i=g(t,n);return i?i.v=r:(t._l=i={i:o=p(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=i),e&&(e.n=i),t[d]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,n,r){s(t,n,(function(t,r){this._t=v(t,n),this._k=r,this._l=void 0}),(function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))}),r?"entries":"values",!r,!0),l(n)}}},function(t,n,r){"use strict";var e=r(44),o=r(28).getWeak,i=r(3),u=r(4),c=r(43),a=r(57),s=r(23),f=r(14),l=r(38),h=s(5),p=s(6),v=0,d=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,n){return h(t.a,(function(t){return t[0]===n}))};g.prototype={get:function(t){var n=y(this,t);if(n)return n[1]},has:function(t){return!!y(this,t)},set:function(t,n){var r=y(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,(function(n){return n[0]===t}));return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,r,i){var s=t((function(t,e){c(t,s,n,"_i"),t._t=n,t._i=v++,t._l=void 0,null!=e&&a(e,r,t[i],t)}));return e(s.prototype,{delete:function(t){if(!u(t))return!1;var r=o(t);return!0===r?d(l(this,n)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!u(t))return!1;var r=o(t);return!0===r?d(l(this,n)).has(t):r&&f(r,this._i)}}),s},def:function(t,n,r){var e=o(i(n),!0);return!0===e?d(t).set(n,r):e[t._i]=r,t},ufstore:d}},function(t,n,r){var e=r(20),o=r(6);t.exports=function(t){if(void 0===t)return 0;var n=e(t),r=o(n);if(n!==r)throw RangeError("Wrong length!");return r}},function(t,n,r){var e=r(35),o=r(51),i=r(3),u=r(1).Reflect;t.exports=u&&u.ownKeys||function(t){var n=e.f(i(t)),r=o.f;return r?n.concat(r(t)):n}},function(t,n,r){var e=r(6),o=r(70),i=r(25);t.exports=function(t,n,r,u){var c=String(i(t)),a=c.length,s=void 0===r?" ":String(r),f=e(n);if(f<=a||""==s)return c;var l=f-a,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,r){var e=r(8),o=r(32),i=r(16),u=r(46).f;t.exports=function(t){return function(n){for(var r,c=i(n),a=o(c),s=a.length,f=0,l=[];s>f;)r=a[f++],e&&!u.call(c,r)||l.push(t?[r,c[r]]:c[r]);return l}}},function(t,n){var r=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=r)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,r){"use strict";t.exports=function(t,n){return function(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];return t.apply(n,r)}}},function(t,n,r){"use strict";var e=r(13);function o(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,n,r){if(!n)return t;var i;if(r)i=r(n);else if(e.isURLSearchParams(n))i=n.toString();else{var u=[];e.forEach(n,(function(t,n){null!=t&&(e.isArray(t)?n+="[]":t=[t],e.forEach(t,(function(t){e.isDate(t)?t=t.toISOString():e.isObject(t)&&(t=JSON.stringify(t)),u.push(o(n)+"="+o(t))})))})),i=u.join("&")}if(i){var c=t.indexOf("#");-1!==c&&(t=t.slice(0,c)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},function(t,n,r){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,n,r){"use strict";(function(n){var e=r(13),o=r(323),i={"Content-Type":"application/x-www-form-urlencoded"};function u(t,n){!e.isUndefined(t)&&e.isUndefined(t["Content-Type"])&&(t["Content-Type"]=n)}var c,a={adapter:("undefined"!=typeof XMLHttpRequest?c=r(128):void 0!==n&&"[object process]"===Object.prototype.toString.call(n)&&(c=r(128)),c),transformRequest:[function(t,n){return o(n,"Accept"),o(n,"Content-Type"),e.isFormData(t)||e.isArrayBuffer(t)||e.isBuffer(t)||e.isStream(t)||e.isFile(t)||e.isBlob(t)?t:e.isArrayBufferView(t)?t.buffer:e.isURLSearchParams(t)?(u(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):e.isObject(t)?(u(n,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};a.headers={common:{Accept:"application/json, text/plain, */*"}},e.forEach(["delete","get","head"],(function(t){a.headers[t]={}})),e.forEach(["post","put","patch"],(function(t){a.headers[t]=e.merge(i)})),t.exports=a}).call(this,r(322))},function(t,n,r){"use strict";var e=r(13),o=r(324),i=r(326),u=r(125),c=r(327),a=r(330),s=r(331),f=r(129);t.exports=function(t){return new Promise((function(n,r){var l=t.data,h=t.headers;e.isFormData(l)&&delete h["Content-Type"];var p=new XMLHttpRequest;if(t.auth){var v=t.auth.username||"",d=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";h.Authorization="Basic "+btoa(v+":"+d)}var g=c(t.baseURL,t.url);if(p.open(t.method.toUpperCase(),u(g,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,i={data:t.responseType&&"text"!==t.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:e,config:t,request:p};o(n,r,i),p=null}},p.onabort=function(){p&&(r(f("Request aborted",t,"ECONNABORTED",p)),p=null)},p.onerror=function(){r(f("Network Error",t,null,p)),p=null},p.ontimeout=function(){var n="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(n=t.timeoutErrorMessage),r(f(n,t,"ECONNABORTED",p)),p=null},e.isStandardBrowserEnv()){var y=(t.withCredentials||s(g))&&t.xsrfCookieName?i.read(t.xsrfCookieName):void 0;y&&(h[t.xsrfHeaderName]=y)}if("setRequestHeader"in p&&e.forEach(h,(function(t,n){void 0===l&&"content-type"===n.toLowerCase()?delete h[n]:p.setRequestHeader(n,t)})),e.isUndefined(t.withCredentials)||(p.withCredentials=!!t.withCredentials),t.responseType)try{p.responseType=t.responseType}catch(n){if("json"!==t.responseType)throw n}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){p&&(p.abort(),r(t),p=null)})),l||(l=null),p.send(l)}))}},function(t,n,r){"use strict";var e=r(325);t.exports=function(t,n,r,o,i){var u=new Error(t);return e(u,n,r,o,i)}},function(t,n,r){"use strict";var e=r(13);t.exports=function(t,n){n=n||{};var r={},o=["url","method","data"],i=["headers","auth","proxy","params"],u=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],c=["validateStatus"];function a(t,n){return e.isPlainObject(t)&&e.isPlainObject(n)?e.merge(t,n):e.isPlainObject(n)?e.merge({},n):e.isArray(n)?n.slice():n}function s(o){e.isUndefined(n[o])?e.isUndefined(t[o])||(r[o]=a(void 0,t[o])):r[o]=a(t[o],n[o])}e.forEach(o,(function(t){e.isUndefined(n[t])||(r[t]=a(void 0,n[t]))})),e.forEach(i,s),e.forEach(u,(function(o){e.isUndefined(n[o])?e.isUndefined(t[o])||(r[o]=a(void 0,t[o])):r[o]=a(void 0,n[o])})),e.forEach(c,(function(e){e in n?r[e]=a(t[e],n[e]):e in t&&(r[e]=a(void 0,t[e]))}));var f=o.concat(i).concat(u).concat(c),l=Object.keys(t).concat(Object.keys(n)).filter((function(t){return-1===f.indexOf(t)}));return e.forEach(l,s),r}},function(t,n,r){"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},function(t,n,r){"use strict";r(133),r(276),r(278),r(281),r(283),r(285),r(287),r(289),r(291),r(293),r(295),r(297),r(299),r(303)},function(t,n,r){r(134),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(145),r(146),r(147),r(148),r(149),r(150),r(151),r(152),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(215),r(216),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(226),r(227),r(228),r(229),r(230),r(231),r(232),r(233),r(234),r(235),r(236),r(237),r(238),r(82),r(239),r(111),r(240),r(112),r(241),r(242),r(243),r(244),r(113),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(257),r(258),r(259),r(260),r(261),r(262),r(263),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),t.exports=r(7)},function(t,n,r){"use strict";var e=r(1),o=r(14),i=r(8),u=r(0),c=r(11),a=r(28).KEY,s=r(2),f=r(49),l=r(39),h=r(30),p=r(5),v=r(63),d=r(92),g=r(136),y=r(52),m=r(3),x=r(4),b=r(10),w=r(16),S=r(27),_=r(29),E=r(34),O=r(95),P=r(21),A=r(51),j=r(9),F=r(32),M=P.f,T=j.f,N=O.f,R=e.Symbol,I=e.JSON,L=I&&I.stringify,k=p("_hidden"),C=p("toPrimitive"),D={}.propertyIsEnumerable,B=f("symbol-registry"),U=f("symbols"),W=f("op-symbols"),V=Object.prototype,q="function"==typeof R&&!!A.f,G=e.QObject,z=!G||!G.prototype||!G.prototype.findChild,H=i&&s((function(){return 7!=E(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a}))?function(t,n,r){var e=M(V,n);e&&delete V[n],T(t,n,r),e&&t!==V&&T(V,n,e)}:T,Y=function(t){var n=U[t]=E(R.prototype);return n._k=t,n},$=q&&"symbol"==typeof R.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof R},X=function(t,n,r){return t===V&&X(W,n,r),m(t),n=S(n,!0),m(r),o(U,n)?(r.enumerable?(o(t,k)&&t[k][n]&&(t[k][n]=!1),r=E(r,{enumerable:_(0,!1)})):(o(t,k)||T(t,k,_(1,{})),t[k][n]=!0),H(t,n,r)):T(t,n,r)},J=function(t,n){m(t);for(var r,e=g(n=w(n)),o=0,i=e.length;i>o;)X(t,r=e[o++],n[r]);return t},K=function(t){var n=D.call(this,t=S(t,!0));return!(this===V&&o(U,t)&&!o(W,t))&&(!(n||!o(this,t)||!o(U,t)||o(this,k)&&this[k][t])||n)},Z=function(t,n){if(t=w(t),n=S(n,!0),t!==V||!o(U,n)||o(W,n)){var r=M(t,n);return!r||!o(U,n)||o(t,k)&&t[k][n]||(r.enumerable=!0),r}},Q=function(t){for(var n,r=N(w(t)),e=[],i=0;r.length>i;)o(U,n=r[i++])||n==k||n==a||e.push(n);return e},tt=function(t){for(var n,r=t===V,e=N(r?W:w(t)),i=[],u=0;e.length>u;)!o(U,n=e[u++])||r&&!o(V,n)||i.push(U[n]);return i};q||(c((R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===V&&n.call(W,r),o(this,k)&&o(this[k],t)&&(this[k][t]=!1),H(this,t,_(1,r))};return i&&z&&H(V,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",(function(){return this._k})),P.f=Z,j.f=X,r(35).f=O.f=Q,r(46).f=K,A.f=tt,i&&!r(31)&&c(V,"propertyIsEnumerable",K,!0),v.f=function(t){return Y(p(t))}),u(u.G+u.W+u.F*!q,{Symbol:R});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;nt.length>rt;)p(nt[rt++]);for(var et=F(p.store),ot=0;et.length>ot;)d(et[ot++]);u(u.S+u.F*!q,"Symbol",{for:function(t){return o(B,t+="")?B[t]:B[t]=R(t)},keyFor:function(t){if(!$(t))throw TypeError(t+" is not a symbol!");for(var n in B)if(B[n]===t)return n},useSetter:function(){z=!0},useSimple:function(){z=!1}}),u(u.S+u.F*!q,"Object",{create:function(t,n){return void 0===n?E(t):J(E(t),n)},defineProperty:X,defineProperties:J,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=s((function(){A.f(1)}));u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return A.f(b(t))}}),I&&u(u.S+u.F*(!q||s((function(){var t=R();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))}))),"JSON",{stringify:function(t){for(var n,r,e=[t],o=1;arguments.length>o;)e.push(arguments[o++]);if(r=n=e[1],(x(n)||void 0!==t)&&!$(t))return y(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!$(n))return n}),e[1]=n,L.apply(I,e)}}),R.prototype[C]||r(15)(R.prototype,C,R.prototype.valueOf),l(R,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},function(t,n,r){t.exports=r(49)("native-function-to-string",Function.toString)},function(t,n,r){var e=r(32),o=r(51),i=r(46);t.exports=function(t){var n=e(t),r=o.f;if(r)for(var u,c=r(t),a=i.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,r){var e=r(0);e(e.S,"Object",{create:r(34)})},function(t,n,r){var e=r(0);e(e.S+e.F*!r(8),"Object",{defineProperty:r(9).f})},function(t,n,r){var e=r(0);e(e.S+e.F*!r(8),"Object",{defineProperties:r(94)})},function(t,n,r){var e=r(16),o=r(21).f;r(22)("getOwnPropertyDescriptor",(function(){return function(t,n){return o(e(t),n)}}))},function(t,n,r){var e=r(10),o=r(36);r(22)("getPrototypeOf",(function(){return function(t){return o(e(t))}}))},function(t,n,r){var e=r(10),o=r(32);r(22)("keys",(function(){return function(t){return o(e(t))}}))},function(t,n,r){r(22)("getOwnPropertyNames",(function(){return r(95).f}))},function(t,n,r){var e=r(4),o=r(28).onFreeze;r(22)("freeze",(function(t){return function(n){return t&&e(n)?t(o(n)):n}}))},function(t,n,r){var e=r(4),o=r(28).onFreeze;r(22)("seal",(function(t){return function(n){return t&&e(n)?t(o(n)):n}}))},function(t,n,r){var e=r(4),o=r(28).onFreeze;r(22)("preventExtensions",(function(t){return function(n){return t&&e(n)?t(o(n)):n}}))},function(t,n,r){var e=r(4);r(22)("isFrozen",(function(t){return function(n){return!e(n)||!!t&&t(n)}}))},function(t,n,r){var e=r(4);r(22)("isSealed",(function(t){return function(n){return!e(n)||!!t&&t(n)}}))},function(t,n,r){var e=r(4);r(22)("isExtensible",(function(t){return function(n){return!!e(n)&&(!t||t(n))}}))},function(t,n,r){var e=r(0);e(e.S+e.F,"Object",{assign:r(96)})},function(t,n,r){var e=r(0);e(e.S,"Object",{is:r(97)})},function(t,n,r){var e=r(0);e(e.S,"Object",{setPrototypeOf:r(67).set})},function(t,n,r){"use strict";var e=r(47),o={};o[r(5)("toStringTag")]="z",o+""!="[object z]"&&r(11)(Object.prototype,"toString",(function(){return"[object "+e(this)+"]"}),!0)},function(t,n,r){var e=r(0);e(e.P,"Function",{bind:r(98)})},function(t,n,r){var e=r(9).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||r(8)&&e(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,r){"use strict";var e=r(4),o=r(36),i=r(5)("hasInstance"),u=Function.prototype;i in u||r(9).f(u,i,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,r){var e=r(0),o=r(100);e(e.G+e.F*(parseInt!=o),{parseInt:o})},function(t,n,r){var e=r(0),o=r(101);e(e.G+e.F*(parseFloat!=o),{parseFloat:o})},function(t,n,r){"use strict";var e=r(1),o=r(14),i=r(24),u=r(69),c=r(27),a=r(2),s=r(35).f,f=r(21).f,l=r(9).f,h=r(40).trim,p=e.Number,v=p,d=p.prototype,g="Number"==i(r(34)(d)),y="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var r,e,o,i=(n=y?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:e=2,o=49;break;case 79:case 111:e=8,o=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>o)return NaN;return parseInt(a,e)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,r=this;return r instanceof p&&(g?a((function(){d.valueOf.call(r)})):"Number"!=i(r))?u(new v(m(n)),r,p):m(n)};for(var x,b=r(8)?s(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;b.length>w;w++)o(v,x=b[w])&&!o(p,x)&&l(p,x,f(v,x));p.prototype=d,d.constructor=p,r(11)(e,"Number",p)}},function(t,n,r){"use strict";var e=r(0),o=r(20),i=r(102),u=r(70),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*s[r],s[r]=e%1e7,e=a(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=s[n],s[n]=a(r/t),r=r%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var r=String(s[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},v=function(t,n,r){return 0===n?r:n%2==1?v(t,n-1,r*t):v(t*t,n/2,r)};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(2)((function(){c.call({})}))),"Number",{toFixed:function(t){var n,r,e,c,a=i(this,f),s=o(t),d="",g="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(r=(n=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n}(a*v(2,69,1))-69)<0?a*v(2,-n,1):a/v(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=s;e>=7;)l(1e7,0),e-=7;for(l(v(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),g=p()}else l(0,r),l(1<<-n,0),g=p()+u.call("0",s);return g=s>0?d+((c=g.length)<=s?"0."+u.call("0",s-c)+g:g.slice(0,c-s)+"."+g.slice(c-s)):d+g}})},function(t,n,r){"use strict";var e=r(0),o=r(2),i=r(102),u=1..toPrecision;e(e.P+e.F*(o((function(){return"1"!==u.call(1,void 0)}))||!o((function(){u.call({})}))),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,r){var e=r(0);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,r){var e=r(0),o=r(1).isFinite;e(e.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,r){var e=r(0);e(e.S,"Number",{isInteger:r(103)})},function(t,n,r){var e=r(0);e(e.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,r){var e=r(0),o=r(103),i=Math.abs;e(e.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,r){var e=r(0);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,r){var e=r(0);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,r){var e=r(0),o=r(101);e(e.S+e.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,r){var e=r(0),o=r(100);e(e.S+e.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,r){var e=r(0),o=r(104),i=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,r){var e=r(0),o=Math.asinh;e(e.S+e.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,r){var e=r(0),o=Math.atanh;e(e.S+e.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,r){var e=r(0),o=r(71);e(e.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,r){var e=r(0),o=Math.exp;e(e.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,r){var e=r(0),o=r(72);e(e.S+e.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,r){var e=r(0);e(e.S,"Math",{fround:r(179)})},function(t,n,r){var e=r(71),o=Math.pow,i=o(2,-52),u=o(2,-23),c=o(2,127)*(2-u),a=o(2,-126);t.exports=Math.fround||function(t){var n,r,o=Math.abs(t),s=e(t);return o<a?s*(o/a/u+1/i-1/i)*a*u:(r=(n=(1+u/i)*o)-(n-o))>c||r!=r?s*(1/0):s*r}},function(t,n,r){var e=r(0),o=Math.abs;e(e.S,"Math",{hypot:function(t,n){for(var r,e,i=0,u=0,c=arguments.length,a=0;u<c;)a<(r=o(arguments[u++]))?(i=i*(e=a/r)*e+1,a=r):i+=r>0?(e=r/a)*e:r;return a===1/0?1/0:a*Math.sqrt(i)}})},function(t,n,r){var e=r(0),o=Math.imul;e(e.S+e.F*r(2)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(t,n){var r=+t,e=+n,o=65535&r,i=65535&e;return 0|o*i+((65535&r>>>16)*i+o*(65535&e>>>16)<<16>>>0)}})},function(t,n,r){var e=r(0);e(e.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,r){var e=r(0);e(e.S,"Math",{log1p:r(104)})},function(t,n,r){var e=r(0);e(e.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,r){var e=r(0);e(e.S,"Math",{sign:r(71)})},function(t,n,r){var e=r(0),o=r(72),i=Math.exp;e(e.S+e.F*r(2)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,r){var e=r(0),o=r(72),i=Math.exp;e(e.S,"Math",{tanh:function(t){var n=o(t=+t),r=o(-t);return n==1/0?1:r==1/0?-1:(n-r)/(i(t)+i(-t))}})},function(t,n,r){var e=r(0);e(e.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,r){var e=r(0),o=r(33),i=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},function(t,n,r){var e=r(0),o=r(16),i=r(6);e(e.S,"String",{raw:function(t){for(var n=o(t.raw),r=i(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,r){"use strict";r(40)("trim",(function(t){return function(){return t(this,3)}}))},function(t,n,r){"use strict";var e=r(73)(!0);r(74)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})}))},function(t,n,r){"use strict";var e=r(0),o=r(73)(!1);e(e.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,r){"use strict";var e=r(0),o=r(6),i=r(75),u="".endsWith;e(e.P+e.F*r(77)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=o(n.length),c=void 0===r?e:Math.min(o(r),e),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,r){"use strict";var e=r(0),o=r(75);e(e.P+e.F*r(77)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,r){var e=r(0);e(e.P,"String",{repeat:r(70)})},function(t,n,r){"use strict";var e=r(0),o=r(6),i=r(75),u="".startsWith;e(e.P+e.F*r(77)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),r=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},function(t,n,r){"use strict";r(12)("anchor",(function(t){return function(n){return t(this,"a","name",n)}}))},function(t,n,r){"use strict";r(12)("big",(function(t){return function(){return t(this,"big","","")}}))},function(t,n,r){"use strict";r(12)("blink",(function(t){return function(){return t(this,"blink","","")}}))},function(t,n,r){"use strict";r(12)("bold",(function(t){return function(){return t(this,"b","","")}}))},function(t,n,r){"use strict";r(12)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},function(t,n,r){"use strict";r(12)("fontcolor",(function(t){return function(n){return t(this,"font","color",n)}}))},function(t,n,r){"use strict";r(12)("fontsize",(function(t){return function(n){return t(this,"font","size",n)}}))},function(t,n,r){"use strict";r(12)("italics",(function(t){return function(){return t(this,"i","","")}}))},function(t,n,r){"use strict";r(12)("link",(function(t){return function(n){return t(this,"a","href",n)}}))},function(t,n,r){"use strict";r(12)("small",(function(t){return function(){return t(this,"small","","")}}))},function(t,n,r){"use strict";r(12)("strike",(function(t){return function(){return t(this,"strike","","")}}))},function(t,n,r){"use strict";r(12)("sub",(function(t){return function(){return t(this,"sub","","")}}))},function(t,n,r){"use strict";r(12)("sup",(function(t){return function(){return t(this,"sup","","")}}))},function(t,n,r){var e=r(0);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,r){"use strict";var e=r(0),o=r(10),i=r(27);e(e.P+e.F*r(2)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var n=o(this),r=i(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},function(t,n,r){var e=r(0),o=r(214);e(e.P+e.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,r){"use strict";var e=r(2),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=e((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))}))||!e((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:i},function(t,n,r){var e=Date.prototype,o=e.toString,i=e.getTime;new Date(NaN)+""!="Invalid Date"&&r(11)(e,"toString",(function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"}))},function(t,n,r){var e=r(5)("toPrimitive"),o=Date.prototype;e in o||r(15)(o,e,r(217))},function(t,n,r){"use strict";var e=r(3),o=r(27);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(e(this),"number"!=t)}},function(t,n,r){var e=r(0);e(e.S,"Array",{isArray:r(52)})},function(t,n,r){"use strict";var e=r(18),o=r(0),i=r(10),u=r(106),c=r(78),a=r(6),s=r(79),f=r(80);o(o.S+o.F*!r(53)((function(t){Array.from(t)})),"Array",{from:function(t){var n,r,o,l,h=i(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,y=0,m=f(h);if(g&&(d=e(d,v>2?arguments[2]:void 0,2)),null==m||p==Array&&c(m))for(r=new p(n=a(h.length));n>y;y++)s(r,y,g?d(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(o=l.next()).done;y++)s(r,y,g?u(l,d,[o.value,y],!0):o.value);return r.length=y,r}})},function(t,n,r){"use strict";var e=r(0),o=r(79);e(e.S+e.F*r(2)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)o(r,t,arguments[t++]);return r.length=n,r}})},function(t,n,r){"use strict";var e=r(0),o=r(16),i=[].join;e(e.P+e.F*(r(45)!=Object||!r(17)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,r){"use strict";var e=r(0),o=r(66),i=r(24),u=r(33),c=r(6),a=[].slice;e(e.P+e.F*r(2)((function(){o&&a.call(o)})),"Array",{slice:function(t,n){var r=c(this.length),e=i(this);if(n=void 0===n?r:n,"Array"==e)return a.call(this,t,n);for(var o=u(t,r),s=u(n,r),f=c(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==e?this.charAt(o+h):this[o+h];return l}})},function(t,n,r){"use strict";var e=r(0),o=r(19),i=r(10),u=r(2),c=[].sort,a=[1,2,3];e(e.P+e.F*(u((function(){a.sort(void 0)}))||!u((function(){a.sort(null)}))||!r(17)(c)),"Array",{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},function(t,n,r){"use strict";var e=r(0),o=r(23)(0),i=r(17)([].forEach,!0);e(e.P+e.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,r){var e=r(4),o=r(52),i=r(5)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),e(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,r){"use strict";var e=r(0),o=r(23)(1);e(e.P+e.F*!r(17)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),o=r(23)(2);e(e.P+e.F*!r(17)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),o=r(23)(3);e(e.P+e.F*!r(17)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),o=r(23)(4);e(e.P+e.F*!r(17)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),o=r(108);e(e.P+e.F*!r(17)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,r){"use strict";var e=r(0),o=r(108);e(e.P+e.F*!r(17)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,r){"use strict";var e=r(0),o=r(50)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!r(17)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(0),o=r(16),i=r(20),u=r(6),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(a||!r(17)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=o(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,i(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},function(t,n,r){var e=r(0);e(e.P,"Array",{copyWithin:r(109)}),r(37)("copyWithin")},function(t,n,r){var e=r(0);e(e.P,"Array",{fill:r(81)}),r(37)("fill")},function(t,n,r){"use strict";var e=r(0),o=r(23)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),e(e.P+e.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),r(37)("find")},function(t,n,r){"use strict";var e=r(0),o=r(23)(6),i="findIndex",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),e(e.P+e.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),r(37)(i)},function(t,n,r){r(42)("Array")},function(t,n,r){var e=r(1),o=r(69),i=r(9).f,u=r(35).f,c=r(76),a=r(54),s=e.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,v=new s(h)!==h;if(r(8)&&(!v||r(2)((function(){return p[r(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")})))){s=function(t,n){var r=this instanceof s,e=c(t),i=void 0===n;return!r&&e&&t.constructor===s&&i?t:o(v?new f(e&&!i?t.source:t,n):f((e=t instanceof s)?t.source:t,e&&i?a.call(t):n),r?this:l,s)};for(var d=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},g=u(f),y=0;g.length>y;)d(g[y++]);l.constructor=s,s.prototype=l,r(11)(e,"RegExp",s)}r(42)("RegExp")},function(t,n,r){"use strict";r(112);var e=r(3),o=r(54),i=r(8),u=/./.toString,c=function(t){r(11)(RegExp.prototype,"toString",t,!0)};r(2)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?c((function(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):"toString"!=u.name&&c((function(){return u.call(this)}))},function(t,n,r){"use strict";var e=r(3),o=r(6),i=r(84),u=r(55);r(56)("match",1,(function(t,n,r,c){return[function(r){var e=t(this),o=null==r?void 0:r[n];return void 0!==o?o.call(r,e):new RegExp(r)[n](String(e))},function(t){var n=c(r,t,this);if(n.done)return n.value;var a=e(t),s=String(this);if(!a.global)return u(a,s);var f=a.unicode;a.lastIndex=0;for(var l,h=[],p=0;null!==(l=u(a,s));){var v=String(l[0]);h[p]=v,""===v&&(a.lastIndex=i(s,o(a.lastIndex),f)),p++}return 0===p?null:h}]}))},function(t,n,r){"use strict";var e=r(3),o=r(10),i=r(6),u=r(20),c=r(84),a=r(55),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(56)("replace",2,(function(t,n,r,v){return[function(e,o){var i=t(this),u=null==e?void 0:e[n];return void 0!==u?u.call(e,i,o):r.call(String(i),e,o)},function(t,n){var o=v(r,t,this,n);if(o.done)return o.value;var l=e(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var x=a(l,h);if(null===x)break;if(m.push(x),!g)break;""===String(x[0])&&(l.lastIndex=c(h,i(l.lastIndex),y))}for(var b,w="",S=0,_=0;_<m.length;_++){x=m[_];for(var E=String(x[0]),O=s(f(u(x.index),h.length),0),P=[],A=1;A<x.length;A++)P.push(void 0===(b=x[A])?b:String(b));var j=x.groups;if(p){var F=[E].concat(P,O,h);void 0!==j&&F.push(j);var M=String(n.apply(void 0,F))}else M=d(E,h,O,P,j,n);O>=S&&(w+=h.slice(S,O)+M,S=O+E.length)}return w+h.slice(S)}];function d(t,n,e,i,u,c){var a=e+t.length,s=i.length,f=p;return void 0!==u&&(u=o(u),f=h),r.call(c,f,(function(r,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,e);case"'":return n.slice(a);case"<":c=u[o.slice(1,-1)];break;default:var f=+o;if(0===f)return r;if(f>s){var h=l(f/10);return 0===h?r:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):r}c=i[f-1]}return void 0===c?"":c}))}}))},function(t,n,r){"use strict";var e=r(3),o=r(97),i=r(55);r(56)("search",1,(function(t,n,r,u){return[function(r){var e=t(this),o=null==r?void 0:r[n];return void 0!==o?o.call(r,e):new RegExp(r)[n](String(e))},function(t){var n=u(r,t,this);if(n.done)return n.value;var c=e(t),a=String(this),s=c.lastIndex;o(s,0)||(c.lastIndex=0);var f=i(c,a);return o(c.lastIndex,s)||(c.lastIndex=s),null===f?-1:f.index}]}))},function(t,n,r){"use strict";var e=r(76),o=r(3),i=r(48),u=r(84),c=r(6),a=r(55),s=r(83),f=r(2),l=Math.min,h=[].push,p=!f((function(){RegExp(4294967295,"y")}));r(56)("split",2,(function(t,n,r,f){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!e(t))return r.call(o,t,n);for(var i,u,c,a=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===n?4294967295:n>>>0,v=new RegExp(t.source,f+"g");(i=s.call(v,o))&&!((u=v.lastIndex)>l&&(a.push(o.slice(l,i.index)),i.length>1&&i.index<o.length&&h.apply(a,i.slice(1)),c=i[0].length,l=u,a.length>=p));)v.lastIndex===i.index&&v.lastIndex++;return l===o.length?!c&&v.test("")||a.push(""):a.push(o.slice(l)),a.length>p?a.slice(0,p):a}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:r.call(this,t,n)}:r,[function(r,e){var o=t(this),i=null==r?void 0:r[n];return void 0!==i?i.call(r,o,e):v.call(String(o),r,e)},function(t,n){var e=f(v,t,this,n,v!==r);if(e.done)return e.value;var s=o(t),h=String(this),d=i(s,RegExp),g=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(p?"y":"g"),m=new d(p?s:"^(?:"+s.source+")",y),x=void 0===n?4294967295:n>>>0;if(0===x)return[];if(0===h.length)return null===a(m,h)?[h]:[];for(var b=0,w=0,S=[];w<h.length;){m.lastIndex=p?w:0;var _,E=a(m,p?h:h.slice(w));if(null===E||(_=l(c(m.lastIndex+(p?0:w)),h.length))===b)w=u(h,w,g);else{if(S.push(h.slice(b,w)),S.length===x)return S;for(var O=1;O<=E.length-1;O++)if(S.push(E[O]),S.length===x)return S;w=b=_}}return S.push(h.slice(b)),S}]}))},function(t,n,r){var e=r(1),o=r(85).set,i=e.MutationObserver||e.WebKitMutationObserver,u=e.process,c=e.Promise,a="process"==r(24)(u);t.exports=function(){var t,n,r,s=function(){var e,o;for(a&&(e=u.domain)&&e.exit();t;){o=t.fn,t=t.next;try{o()}catch(e){throw t?r():n=void 0,e}}n=void 0,e&&e.enter()};if(a)r=function(){u.nextTick(s)};else if(!i||e.navigator&&e.navigator.standalone)if(c&&c.resolve){var f=c.resolve(void 0);r=function(){f.then(s)}}else r=function(){o.call(e,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(e){var o={fn:e,next:void 0};n&&(n.next=o),t||(t=o,r()),n=o}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,r){"use strict";var e=r(116),o=r(38);t.exports=r(59)("Map",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var n=e.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(o(this,"Map"),0===t?0:t,n)}},e,!0)},function(t,n,r){"use strict";var e=r(116),o=r(38);t.exports=r(59)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return e.def(o(this,"Set"),t=0===t?0:t,t)}},e)},function(t,n,r){"use strict";var e,o=r(1),i=r(23)(0),u=r(11),c=r(28),a=r(96),s=r(117),f=r(4),l=r(38),h=r(38),p=!o.ActiveXObject&&"ActiveXObject"in o,v=c.getWeak,d=Object.isExtensible,g=s.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var n=v(t);return!0===n?g(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return s.def(l(this,"WeakMap"),t,n)}},x=t.exports=r(59)("WeakMap",y,m,s,!0,!0);h&&p&&(a((e=s.getConstructor(y,"WeakMap")).prototype,m),c.NEED=!0,i(["delete","has","get","set"],(function(t){var n=x.prototype,r=n[t];u(n,t,(function(n,o){if(f(n)&&!d(n)){this._f||(this._f=new e);var i=this._f[t](n,o);return"set"==t?this:i}return r.call(this,n,o)}))})))},function(t,n,r){"use strict";var e=r(117),o=r(38);r(59)("WeakSet",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return e.def(o(this,"WeakSet"),t,!0)}},e,!1,!0)},function(t,n,r){"use strict";var e=r(0),o=r(60),i=r(86),u=r(3),c=r(33),a=r(6),s=r(4),f=r(1).ArrayBuffer,l=r(48),h=i.ArrayBuffer,p=i.DataView,v=o.ABV&&f.isView,d=h.prototype.slice,g=o.VIEW;e(e.G+e.W+e.F*(f!==h),{ArrayBuffer:h}),e(e.S+e.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||s(t)&&g in t}}),e(e.P+e.U+e.F*r(2)((function(){return!new h(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),o=c(void 0===n?r:n,r),i=new(l(this,h))(a(o-e)),s=new p(this),f=new p(i),v=0;e<o;)f.setUint8(v++,s.getUint8(e++));return i}}),r(42)("ArrayBuffer")},function(t,n,r){var e=r(0);e(e.G+e.W+e.F*!r(60).ABV,{DataView:r(86).DataView})},function(t,n,r){r(26)("Int8",1,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Uint8",1,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Uint8",1,(function(t){return function(n,r,e){return t(this,n,r,e)}}),!0)},function(t,n,r){r(26)("Int16",2,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Uint16",2,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Int32",4,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Uint32",4,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Float32",4,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){r(26)("Float64",8,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},function(t,n,r){var e=r(0),o=r(19),i=r(3),u=(r(1).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!r(2)((function(){u((function(){}))})),"Reflect",{apply:function(t,n,r){var e=o(t),a=i(r);return u?u(e,n,a):c.call(e,n,a)}})},function(t,n,r){var e=r(0),o=r(34),i=r(19),u=r(3),c=r(4),a=r(2),s=r(98),f=(r(1).Reflect||{}).construct,l=a((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),h=!a((function(){f((function(){}))}));e(e.S+e.F*(l||h),"Reflect",{construct:function(t,n){i(t),u(n);var r=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(s.apply(t,e))}var a=r.prototype,p=o(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},function(t,n,r){var e=r(9),o=r(0),i=r(3),u=r(27);o(o.S+o.F*r(2)((function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,n,r){i(t),n=u(n,!0),i(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},function(t,n,r){var e=r(0),o=r(21).f,i=r(3);e(e.S,"Reflect",{deleteProperty:function(t,n){var r=o(i(t),n);return!(r&&!r.configurable)&&delete t[n]}})},function(t,n,r){"use strict";var e=r(0),o=r(3),i=function(t){this._t=o(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};r(105)(i,"Object",(function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}})),e(e.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,r){var e=r(21),o=r(36),i=r(14),u=r(0),c=r(4),a=r(3);u(u.S,"Reflect",{get:function t(n,r){var u,s,f=arguments.length<3?n:arguments[2];return a(n)===f?n[r]:(u=e.f(n,r))?i(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:c(s=o(n))?t(s,r,f):void 0}})},function(t,n,r){var e=r(21),o=r(0),i=r(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return e.f(i(t),n)}})},function(t,n,r){var e=r(0),o=r(36),i=r(3);e(e.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,r){var e=r(0);e(e.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,r){var e=r(0),o=r(3),i=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,r){var e=r(0);e(e.S,"Reflect",{ownKeys:r(119)})},function(t,n,r){var e=r(0),o=r(3),i=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,r){var e=r(9),o=r(21),i=r(36),u=r(14),c=r(0),a=r(29),s=r(3),f=r(4);c(c.S,"Reflect",{set:function t(n,r,c){var l,h,p=arguments.length<4?n:arguments[3],v=o.f(s(n),r);if(!v){if(f(h=i(n)))return t(h,r,c,p);v=a(0)}if(u(v,"value")){if(!1===v.writable||!f(p))return!1;if(l=o.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,e.f(p,r,l)}else e.f(p,r,a(0,c));return!0}return void 0!==v.set&&(v.set.call(p,c),!0)}})},function(t,n,r){var e=r(0),o=r(67);o&&e(e.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,r){r(277),t.exports=r(7).Array.includes},function(t,n,r){"use strict";var e=r(0),o=r(50)(!0);e(e.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),r(37)("includes")},function(t,n,r){r(279),t.exports=r(7).Array.flatMap},function(t,n,r){"use strict";var e=r(0),o=r(280),i=r(10),u=r(6),c=r(19),a=r(107);e(e.P,"Array",{flatMap:function(t){var n,r,e=i(this);return c(t),n=u(e.length),r=a(e,0),o(r,e,e,n,0,1,t,arguments[1]),r}}),r(37)("flatMap")},function(t,n,r){"use strict";var e=r(52),o=r(4),i=r(6),u=r(18),c=r(5)("isConcatSpreadable");t.exports=function t(n,r,a,s,f,l,h,p){for(var v,d,g=f,y=0,m=!!h&&u(h,p,3);y<s;){if(y in a){if(v=m?m(a[y],y,r):a[y],d=!1,o(v)&&(d=void 0!==(d=v[c])?!!d:e(v)),d&&l>0)g=t(n,r,v,i(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=v}g++}y++}return g}},function(t,n,r){r(282),t.exports=r(7).String.padStart},function(t,n,r){"use strict";var e=r(0),o=r(120),i=r(58),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);e(e.P+e.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,r){r(284),t.exports=r(7).String.padEnd},function(t,n,r){"use strict";var e=r(0),o=r(120),i=r(58),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);e(e.P+e.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,r){r(286),t.exports=r(7).String.trimLeft},function(t,n,r){"use strict";r(40)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},function(t,n,r){r(288),t.exports=r(7).String.trimRight},function(t,n,r){"use strict";r(40)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},function(t,n,r){r(290),t.exports=r(63).f("asyncIterator")},function(t,n,r){r(92)("asyncIterator")},function(t,n,r){r(292),t.exports=r(7).Object.getOwnPropertyDescriptors},function(t,n,r){var e=r(0),o=r(119),i=r(16),u=r(21),c=r(79);e(e.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,r,e=i(t),a=u.f,s=o(e),f={},l=0;s.length>l;)void 0!==(r=a(e,n=s[l++]))&&c(f,n,r);return f}})},function(t,n,r){r(294),t.exports=r(7).Object.values},function(t,n,r){var e=r(0),o=r(121)(!1);e(e.S,"Object",{values:function(t){return o(t)}})},function(t,n,r){r(296),t.exports=r(7).Object.entries},function(t,n,r){var e=r(0),o=r(121)(!0);e(e.S,"Object",{entries:function(t){return o(t)}})},function(t,n,r){"use strict";r(113),r(298),t.exports=r(7).Promise.finally},function(t,n,r){"use strict";var e=r(0),o=r(7),i=r(1),u=r(48),c=r(115);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,o.Promise||i.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then((function(){return r}))}:t,r?function(r){return c(n,t()).then((function(){throw r}))}:t)}})},function(t,n,r){r(300),r(301),r(302),t.exports=r(7)},function(t,n,r){var e=r(1),o=r(0),i=r(58),u=[].slice,c=/MSIE .\./.test(i),a=function(t){return function(n,r){var e=arguments.length>2,o=!!e&&u.call(arguments,2);return t(e?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,r)}};o(o.G+o.B+o.F*c,{setTimeout:a(e.setTimeout),setInterval:a(e.setInterval)})},function(t,n,r){var e=r(0),o=r(85);e(e.G+e.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,r){for(var e=r(82),o=r(32),i=r(11),u=r(1),c=r(15),a=r(41),s=r(5),f=s("iterator"),l=s("toStringTag"),h=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(p),d=0;d<v.length;d++){var g,y=v[d],m=p[y],x=u[y],b=x&&x.prototype;if(b&&(b[f]||c(b,f,h),b[l]||c(b,l,y),a[y]=h,m))for(g in e)b[g]||i(b,g,e[g],!0)}},function(t,n,r){var e=function(t){"use strict";var n=Object.prototype,r=n.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},o=e.iterator||"@@iterator",i=e.asyncIterator||"@@asyncIterator",u=e.toStringTag||"@@toStringTag";function c(t,n,r,e){var o=n&&n.prototype instanceof f?n:f,i=Object.create(o.prototype),u=new S(e||[]);return i._invoke=function(t,n,r){var e="suspendedStart";return function(o,i){if("executing"===e)throw new Error("Generator is already running");if("completed"===e){if("throw"===o)throw i;return E()}for(r.method=o,r.arg=i;;){var u=r.delegate;if(u){var c=x(u,r);if(c){if(c===s)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===e)throw e="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e="executing";var f=a(t,n,r);if("normal"===f.type){if(e=r.done?"completed":"suspendedYield",f.arg===s)continue;return{value:f.arg,done:r.done}}"throw"===f.type&&(e="completed",r.method="throw",r.arg=f.arg)}}}(t,r,u),i}function a(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var s={};function f(){}function l(){}function h(){}var p={};p[o]=function(){return this};var v=Object.getPrototypeOf,d=v&&v(v(_([])));d&&d!==n&&r.call(d,o)&&(p=d);var g=h.prototype=f.prototype=Object.create(p);function y(t){["next","throw","return"].forEach((function(n){t[n]=function(t){return this._invoke(n,t)}}))}function m(t){var n;this._invoke=function(e,o){function i(){return new Promise((function(n,i){!function n(e,o,i,u){var c=a(t[e],t,o);if("throw"!==c.type){var s=c.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?Promise.resolve(f.__await).then((function(t){n("next",t,i,u)}),(function(t){n("throw",t,i,u)})):Promise.resolve(f).then((function(t){s.value=t,i(s)}),(function(t){return n("throw",t,i,u)}))}u(c.arg)}(e,o,n,i)}))}return n=n?n.then(i,i):i()}}function x(t,n){var r=t.iterator[n.method];if(void 0===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,x(t,n),"throw"===n.method))return s;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var e=a(r,t.iterator,n.arg);if("throw"===e.type)return n.method="throw",n.arg=e.arg,n.delegate=null,s;var o=e.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,s):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,s)}function b(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function w(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(b,this),this.reset(!0)}function _(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,i=function n(){for(;++e<t.length;)if(r.call(t,e))return n.value=t[e],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=g.constructor=h,h.constructor=l,h[u]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===l||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(m.prototype),m.prototype[i]=function(){return this},t.AsyncIterator=m,t.async=function(n,r,e,o){var i=new m(c(n,r,e,o));return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},y(g),g[u]="Generator",g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},t.values=_,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function e(r,e){return u.type="throw",u.arg=t,n.next=r,e&&(n.method="next",n.arg=void 0),!!e}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if("root"===i.tryLoc)return e("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),a=r.call(i,"finallyLoc");if(c&&a){if(this.prev<i.catchLoc)return e(i.catchLoc,!0);if(this.prev<i.finallyLoc)return e(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return e(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return e(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),s},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),w(r),s}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var o=e.arg;w(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},function(t,n,r){r(305),t.exports=r(122).global},function(t,n,r){var e=r(306);e(e.G,{global:r(87)})},function(t,n,r){var e=r(87),o=r(122),i=r(307),u=r(309),c=r(316),a=function(t,n,r){var s,f,l,h=t&a.F,p=t&a.G,v=t&a.S,d=t&a.P,g=t&a.B,y=t&a.W,m=p?o:o[n]||(o[n]={}),x=m.prototype,b=p?e:v?e[n]:(e[n]||{}).prototype;for(s in p&&(r=n),r)(f=!h&&b&&void 0!==b[s])&&c(m,s)||(l=f?b[s]:r[s],m[s]=p&&"function"!=typeof b[s]?r[s]:g&&f?i(l,e):y&&b[s]==l?function(t){var n=function(n,r,e){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,r)}return new t(n,r,e)}return t.apply(this,arguments)};return n.prototype=t.prototype,n}(l):d&&"function"==typeof l?i(Function.call,l):l,d&&((m.virtual||(m.virtual={}))[s]=l,t&a.R&&x&&!x[s]&&u(x,s,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,r){var e=r(308);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,r){var e=r(310),o=r(315);t.exports=r(89)?function(t,n,r){return e.f(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n,r){var e=r(311),o=r(312),i=r(314),u=Object.defineProperty;n.f=r(89)?Object.defineProperty:function(t,n,r){if(e(t),n=i(n,!0),e(r),o)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){var e=r(88);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n,r){t.exports=!r(89)&&!r(123)((function(){return 7!=Object.defineProperty(r(313)("div"),"a",{get:function(){return 7}}).a}))},function(t,n,r){var e=r(88),o=r(87).document,i=e(o)&&e(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,r){var e=r(88);t.exports=function(t,n){if(!e(t))return t;var r,o;if(n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!e(o=r.call(t)))return o;if(!n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n,r){"use strict";var e=r(13),o=r(124),i=r(318),u=r(130);function c(t){var n=new i(t),r=o(i.prototype.request,n);return e.extend(r,i.prototype,n),e.extend(r,n),r}var a=c(r(127));a.Axios=i,a.create=function(t){return c(u(a.defaults,t))},a.Cancel=r(131),a.CancelToken=r(332),a.isCancel=r(126),a.all=function(t){return Promise.all(t)},a.spread=r(333),a.isAxiosError=r(334),t.exports=a,t.exports.default=a},function(t,n,r){"use strict";var e=r(13),o=r(125),i=r(319),u=r(320),c=r(130);function a(t){this.defaults=t,this.interceptors={request:new i,response:new i}}a.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=c(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=[u,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){n.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){n.push(t.fulfilled,t.rejected)}));n.length;)r=r.then(n.shift(),n.shift());return r},a.prototype.getUri=function(t){return t=c(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},e.forEach(["delete","get","head","options"],(function(t){a.prototype[t]=function(n,r){return this.request(c(r||{},{method:t,url:n,data:(r||{}).data}))}})),e.forEach(["post","put","patch"],(function(t){a.prototype[t]=function(n,r,e){return this.request(c(e||{},{method:t,url:n,data:r}))}})),t.exports=a},function(t,n,r){"use strict";var e=r(13);function o(){this.handlers=[]}o.prototype.use=function(t,n){return this.handlers.push({fulfilled:t,rejected:n}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){e.forEach(this.handlers,(function(n){null!==n&&t(n)}))},t.exports=o},function(t,n,r){"use strict";var e=r(13),o=r(321),i=r(126),u=r(127);function c(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return c(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=e.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),e.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete t.headers[n]})),(t.adapter||u.adapter)(t).then((function(n){return c(t),n.data=o(n.data,n.headers,t.transformResponse),n}),(function(n){return i(n)||(c(t),n&&n.response&&(n.response.data=o(n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)}))}},function(t,n,r){"use strict";var e=r(13);t.exports=function(t,n,r){return e.forEach(r,(function(r){t=r(t,n)})),t}},function(t,n){var r,e,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(n){try{return r.call(null,t,0)}catch(n){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{e="function"==typeof clearTimeout?clearTimeout:u}catch(t){e=u}}();var a,s=[],f=!1,l=-1;function h(){f&&a&&(f=!1,a.length?s=a.concat(s):l=-1,s.length&&p())}function p(){if(!f){var t=c(h);f=!0;for(var n=s.length;n;){for(a=s,s=[];++l<n;)a&&a[l].run();l=-1,n=s.length}a=null,f=!1,function(t){if(e===clearTimeout)return clearTimeout(t);if((e===u||!e)&&clearTimeout)return e=clearTimeout,clearTimeout(t);try{e(t)}catch(n){try{return e.call(null,t)}catch(n){return e.call(this,t)}}}(t)}}function v(t,n){this.fun=t,this.array=n}function d(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];s.push(new v(t,n)),1!==s.length||f||c(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n,r){"use strict";var e=r(13);t.exports=function(t,n){e.forEach(t,(function(r,e){e!==n&&e.toUpperCase()===n.toUpperCase()&&(t[n]=r,delete t[e])}))}},function(t,n,r){"use strict";var e=r(129);t.exports=function(t,n,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?n(e("Request failed with status code "+r.status,r.config,null,r.request,r)):t(r)}},function(t,n,r){"use strict";t.exports=function(t,n,r,e,o){return t.config=n,r&&(t.code=r),t.request=e,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,n,r){"use strict";var e=r(13);t.exports=e.isStandardBrowserEnv()?{write:function(t,n,r,o,i,u){var c=[];c.push(t+"="+encodeURIComponent(n)),e.isNumber(r)&&c.push("expires="+new Date(r).toGMTString()),e.isString(o)&&c.push("path="+o),e.isString(i)&&c.push("domain="+i),!0===u&&c.push("secure"),document.cookie=c.join("; ")},read:function(t){var n=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,n,r){"use strict";var e=r(328),o=r(329);t.exports=function(t,n){return t&&!e(n)?o(t,n):n}},function(t,n,r){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,n,r){"use strict";t.exports=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}},function(t,n,r){"use strict";var e=r(13),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var n,r,i,u={};return t?(e.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),n=e.trim(t.substr(0,i)).toLowerCase(),r=e.trim(t.substr(i+1)),n){if(u[n]&&o.indexOf(n)>=0)return;u[n]="set-cookie"===n?(u[n]?u[n]:[]).concat([r]):u[n]?u[n]+", "+r:r}})),u):u}},function(t,n,r){"use strict";var e=r(13);t.exports=e.isStandardBrowserEnv()?function(){var t,n=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(t){var e=t;return n&&(r.setAttribute("href",e),e=r.href),r.setAttribute("href",e),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=o(window.location.href),function(n){var r=e.isString(n)?o(n):n;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},function(t,n,r){"use strict";var e=r(131);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(t){n=t}));var r=this;t((function(t){r.reason||(r.reason=new e(t),n(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(n){t=n})),cancel:t}},t.exports=o},function(t,n,r){"use strict";t.exports=function(t){return function(n){return t.apply(null,n)}}},function(t,n,r){"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},function(t,n,r){"use strict";r.r(n);var e=r(61),o=r.n(e);function i(t,n,r,e,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void r(t)}c.done?n(a):Promise.resolve(a).then(e,o)}function u(t,n){for(var r=0;r<n.length;r++){var e=n[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}r(90);var c=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.query=n}var n,r,e,c,a;return n=t,(r=[{key:"doSearch",value:(c=regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,o()("https://forkify-api.herokuapp.com/api/search?q="+this.query);case 3:return n=t.sent,this.result=n.data.recipes,t.abrupt("return",this.result);case 8:t.prev=8,t.t0=t.catch(0),console.log("Асуудал гарлаа : "+t.t0);case 11:case"end":return t.stop()}}),t,this,[[0,8]])})),a=function(){var t=this,n=arguments;return new Promise((function(r,e){var o=c.apply(t,n);function u(t){i(o,r,e,u,a,"next",t)}function a(t){i(o,r,e,u,a,"throw",t)}u(void 0)}))},function(){return a.apply(this,arguments)})}])&&u(n.prototype,r),e&&u(n,e),t}(),a={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search__field"),searchResultDiv:document.querySelector(".results"),searchResultList:document.querySelector(".results__list"),pageButtons:document.querySelector(".results__pages")},s="loader",f=function(){var t=document.querySelector(".".concat(s));t&&t.parentElement.removeChild(t)},l=function(t){var n='\n    <li>\n        <a class="results__link" href="#'.concat(t.recipe_id,'">\n            <figure class="results__fig">\n                <img src="').concat(t.image_url,'" alt="Test">\n            </figure>\n            <div class="results__data">\n                <h4 class="results__name">').concat(t.title,'</h4>\n                <p class="results__author">').concat(t.publisher,"</p>\n            </div>\n        </a>\n    </li>");a.searchResultList.insertAdjacentHTML("beforeend",n)},h=function(){a.searchResultList.innerHTML="",a.pageButtons.innerHTML=""},p=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,e=(n-1)*r,o=n*r;t.slice(e,o).forEach((function(t){return l(t)}));var i=Math.ceil(t.length/r);d(n,i)},v=function(t,n,r){return'<button class="btn-inline results__btn--'.concat(n,'" data-goto=').concat(t,'>\n  <svg class="search__icon">\n      <use href="img/icons.svg#icon-triangle-').concat(r,'"></use>\n  </svg>\n  <span>Хуудас ').concat(t,"</span>\n  </button>")},d=function(t,n){var r;1===t&&n>1?r=v(2,"next","right"):t<n?(r=v(t-1,"prev","left"),r+=v(t+1,"next","right")):t===n&&(r=v(t-1,"prev","left")),a.pageButtons.insertAdjacentHTML("afterbegin",r)};function g(t,n,r,e,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void r(t)}c.done?n(a):Promise.resolve(a).then(e,o)}function y(t,n){for(var r=0;r<n.length;r++){var e=n[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}var m=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=n}var n,r,e,i,u;return n=t,(r=[{key:"getRecipe",value:(i=regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,o()("https://forkify-api.herokuapp.com/api/get?rId="+this.id);case 2:n=t.sent,this.publisher=n.data.recipe.publisher,this.ingredients=n.data.recipe.ingredients,this.source_url=n.data.recipe.source_url,this.recipe_id=n.data.recipe.recipe_id,this.image_url=n.data.recipe.image_url,this.publisher_url=n.data.recipe.publisher_url,this.title=n.data.recipe.title,console.log(this.title),console.log(this.ingredients);case 12:case"end":return t.stop()}}),t,this)})),u=function(){var t=this,n=arguments;return new Promise((function(r,e){var o=i.apply(t,n);function u(t){g(o,r,e,u,c,"next",t)}function c(t){g(o,r,e,u,c,"throw",t)}u(void 0)}))},function(){return u.apply(this,arguments)})}])&&y(n.prototype,r),e&&y(n,e),t}();function x(t,n,r,e,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void r(t)}c.done?n(a):Promise.resolve(a).then(e,o)}r(90);var b={},w=function(){var t,n=(t=regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(n=a.searchInput.value)){t.next=10;break}return b.search=new c(n),a.searchInput.value="",h(),r=a.searchResultDiv,e=void 0,e='\n        <div class="'.concat(s,'">\n            <svg>\n                <use href="img/icons.svg#icon-cw"</use>\n            </svg>\n        </div>\n  '),r.insertAdjacentHTML("afterbegin",e),t.next=8,b.search.doSearch();case 8:f(),void 0===b.search.result?alert("Хайлтаар илэрцгүй..."):p(b.search.result);case 10:case"end":return t.stop()}var r,e}),t)})),function(){var n=this,r=arguments;return new Promise((function(e,o){var i=t.apply(n,r);function u(t){x(i,e,o,u,c,"next",t)}function c(t){x(i,e,o,u,c,"throw",t)}u(void 0)}))});return function(){return n.apply(this,arguments)}}();a.searchForm.addEventListener("submit",(function(t){t.preventDefault(),w()})),a.pageButtons.addEventListener("click",(function(t){var n=t.target.closest(".btn-inline");if(n){var r=parseInt(n.dataset.goto,10);h(),p(b.search.result,r)}})),new m(47746).getRecipe()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL25vQ29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3dlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kZWwvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92aWV3L2Jhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3ZpZXcvc2VhcmNoVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kZWwvUmVjaXBlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiX19nIiwiZXhlYyIsImUiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwidmVyc2lvbiIsIl9fZSIsImEiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiQXR0cmlidXRlcyIsImRlZmluZWQiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJpc1VuZGVmaW5lZCIsImlzUGxhaW5PYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImZvckVhY2giLCJvYmoiLCJmbiIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsInNsaWNlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImNyZWF0ZURlc2MiLCJJT2JqZWN0IiwibWV0aG9kIiwiYXJnIiwiYUZ1bmN0aW9uIiwidGhhdCIsImFwcGx5IiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiS0VZIiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJwdXNoIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCJBcnJheSIsIiRBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJrZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsIkZPUkNFRF9TRVQiLCJzZXQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsIml0ZXJhdG9yIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIm5leHQiLCJkb25lIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByb3RvIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJtYXAiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJkYXRhIiwidiIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsImNvbmNhdCIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJmcm9tIiwidmFsdWVPZiIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJPYmplY3RQcm90byIsIlVOU0NPUEFCTEVTIiwiX3QiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIkQiLCJjb3B5cmlnaHQiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJyZSIsImdyb3VwcyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsImlzIiwiY3JlYXRlRWxlbWVudCIsInNoYXJlZCIsImRvY3VtZW50RWxlbWVudCIsImNoZWNrIiwic2V0UHJvdG90eXBlT2YiLCJidWdneSIsIl9fcHJvdG9fXyIsImNvdW50IiwiSW5maW5pdHkiLCJzaWduIiwieCIsIiRleHBtMSIsImV4cG0xIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiQmFzZUJ1ZmZlciIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCJqIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJfZ2xvYmFsIiwiX2JhYmVsUG9seWZpbGwiLCJjb25zb2xlIiwid2FybiIsIndrc0V4dCIsIiRTeW1ib2wiLCJuYW1lcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUFMiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIksiLCJrIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsInkiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJwYXJ0QXJncyIsImJvdW5kIiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIm1zZyIsImlzRmluaXRlIiwibG9nMXAiLCJkZXNjcmlwdG9yIiwicmV0Iiwib3JpZ2luYWwiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZm9yY2VkIiwiZmxhZ3MiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsInRhc2siLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwicHJvbWlzZSIsInJlc29sdmUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInRoZW4iLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0IiwiZG9tYWluIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJlcnJvciIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsImVyciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIlByb21pc2UiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfbCIsInByZXYiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCJ1ZnN0b3JlIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwidXRpbHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidG9JU09TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwidG9VcHBlckNhc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJDYW5jZWwiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic3ltYm9scyIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJjb2xvciIsInNpemUiLCJEYXRlIiwiZ2V0VGltZSIsInRvSlNPTiIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJEYXRlUHJvdG8iLCJoaW50IiwiY3JlYXRlUHJvcGVydHkiLCJ1cFRvIiwiY2xvbmVkIiwiJHNvcnQiLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRmaWx0ZXIiLCIkc29tZSIsIiRldmVyeSIsIiRyZWR1Y2UiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIkZmluZCIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJkZWZpbmUiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiJG1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJjaCIsImNhcHR1cmUiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaGVhZCIsImxhc3QiLCJmbHVzaCIsInBhcmVudCIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInN0cm9uZyIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIiRXZWFrTWFwIiwiJGlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImZsYXRNYXAiLCJmbGF0dGVuSW50b0FycmF5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwic291cmNlTGVuIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJkZXB0aCIsIm1hcHBlciIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsIm1hcEZuIiwicGFkU3RhcnQiLCIkcGFkIiwiV0VCS0lUX0JVRyIsInBhZEVuZCIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIkdmFsdWVzIiwib25GaW5hbGx5IiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiSVNfV1JBUCIsInZpcnR1YWwiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsImRlZmF1bHQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImV4cGlyZXMiLCJwYXRoIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwiY2FsbGJhY2siLCJwYXlsb2FkIiwicmVxdWlyZSIsIlNlYXJjaCIsInF1ZXJ5IiwicmVjaXBlcyIsImVsZW1lbnRzIiwic2VhcmNoRm9ybSIsInF1ZXJ5U2VsZWN0b3IiLCJzZWFyY2hJbnB1dCIsInNlYXJjaFJlc3VsdERpdiIsInNlYXJjaFJlc3VsdExpc3QiLCJwYWdlQnV0dG9ucyIsImVsZW1lbnRTdHJpbmdzIiwiY2xlYXJMb2FkZXIiLCJsb2FkZXIiLCJwYXJlbnRFbGVtZW50IiwicmVuZGVyUmVjaXBlIiwicmVjaXBlIiwibWFya3VwIiwicmVjaXBlX2lkIiwiaW1hZ2VfdXJsIiwicHVibGlzaGVyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiY2xlYXJTZWFyY2hSZXN1bHQiLCJpbm5lckhUTUwiLCJyZW5kZXJSZWNpcGVzIiwiY3VycmVudFBhZ2UiLCJyZXNQZXJQYWdlIiwidG90YWxQYWdlcyIsInJlbmRlckJ1dHRvbnMiLCJjcmVhdGVCdXR0b24iLCJwYWdlIiwiZGlyZWN0aW9uIiwiYnV0dG9uSHRtbCIsIlJlY2lwZSIsImluZ3JlZGllbnRzIiwic291cmNlX3VybCIsInB1Ymxpc2hlcl91cmwiLCJjb250cm9sU2VhcmNoIiwic2VhcmNoVmlldyIsImRvU2VhcmNoIiwiYWxlcnQiLCJwcmV2ZW50RGVmYXVsdCIsImJ0biIsImNsb3Nlc3QiLCJnb3RvUGFnZU51bWJlciIsImRhdGFzZXQiLCJnZXRSZWNpcGUiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFP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Q1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxJQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtB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LHlhQ25DckJsQyxFQUFRLElBY1IsSUFBTXJLLEVBQVEsR0FFUjBNLEVBQWEsZSxFQUFBLEcsRUFBQSx5QkFBRyx3R0FFZG5DLEVGVXNCRSxFQUFTRyxZQUFZM3lDLE9FWjdCLHdCQU1sQituQyxFQUFNNU4sT0FBUyxJQUFJa1ksRUFBT0MsR0ZBNUJFLEVBQVNHLFlBQVkzeUMsTUFBUSxHRUkzQjAwQyxJSFJ5QnRVLEVHU1pvUyxFQUFTSSxnQkhSbEJLLFdBQVMseUJBQUgsT0FDUUYsRUFEUiwwSEFRWjNTLEVBQU9xVCxtQkFBbUIsYUFBY1IsR0dYcEIsU0FjWmxMLEVBQU01TixPQUFPd2EsV0FkRCxPQWlCbEIzQixTQUM0QjF3QyxJQUF4QnlsQyxFQUFNNU4sT0FBT3h5QixPQUFzQml0QyxNQUFNLHdCQUN4Q0YsRUFBeUIzTSxFQUFNNU4sT0FBT3h5QixRQW5CekIsa0NIRU0sSUFBQ3k0QixFQUNyQjZTLElHSGMsTSwrS0FBSCxxREF1Qm5CVCxFQUFTQyxXQUFXaHlCLGlCQUFpQixVQUFVLFNBQUN6ZCxHQUM5Q0EsRUFBRTZ4QyxpQkFDRkosT0FHRmpDLEVBQVNNLFlBQVlyeUIsaUJBQWlCLFNBQVMsU0FBQ3pkLEdBQzlDLElBQU04eEMsRUFBTTl4QyxFQUFFWixPQUFPMnlDLFFBQVEsZUFFN0IsR0FBSUQsRUFBSyxDQUNQLElBQU1FLEVBQWlCdHZCLFNBQVNvdkIsRUFBSUcsUUFBSixLQUFrQixJQUNsRFAsSUFDQUEsRUFBeUIzTSxFQUFNNU4sT0FBT3h5QixPQUFRcXRDLE9BSXhDLElBQUlYLEVBQU8sT0FDbkJhIiwiZmlsZSI6ImpzL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzM1KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjExJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi9ub0NvbmZsaWN0XCIpO1xuXG52YXIgX2dsb2JhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nbG9iYWxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuaWYgKF9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2Fybikge1xuICBjb25zb2xlLndhcm4oXCJAYmFiZWwvcG9seWZpbGwgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlIG9uIHRoaXMgcGFnZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgZGVzaXJhYmxlL2ludGVuZGVkIFwiICsgXCJhbmQgbWF5IGhhdmUgY29uc2VxdWVuY2VzIGlmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgcG9seWZpbGxzIGFyZSBhcHBsaWVkIHNlcXVlbnRpYWxseS4gXCIgKyBcIklmIHlvdSBkbyBuZWVkIHRvIGxvYWQgdGhlIHBvbHlmaWxsIG1vcmUgdGhhbiBvbmNlLCB1c2UgQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QgXCIgKyBcImluc3RlYWQgdG8gYnlwYXNzIHRoZSB3YXJuaW5nLlwiKTtcbn1cblxuX2dsb2JhbFtcImRlZmF1bHRcIl0uX2JhYmVsUG9seWZpbGwgPSB0cnVlOyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2VzNlwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRFbmQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltTGVmdDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1SaWdodDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZW50cmllcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5nbG9iYWw7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsInJlcXVpcmUoXCJAYmFiZWwvcG9seWZpbGxcIik7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaCB7XHJcbiAgY29uc3RydWN0b3IocXVlcnkpIHtcclxuICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRvU2VhcmNoKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGF4aW9zKFxyXG4gICAgICAgIFwiaHR0cHM6Ly9mb3JraWZ5LWFwaS5oZXJva3VhcHAuY29tL2FwaS9zZWFyY2g/cT1cIiArIHRoaXMucXVlcnlcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQuZGF0YS5yZWNpcGVzO1xyXG5cclxuICAgICAgcmV0dXJuIHRoaXMucmVzdWx0O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coXCLQkNGB0YPRg9C00LDQuyDQs9Cw0YDQu9Cw0LAgOiBcIiArIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGVsZW1lbnRzID0ge1xyXG4gIHNlYXJjaEZvcm06IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VhcmNoXCIpLFxyXG4gIHNlYXJjaElucHV0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlYXJjaF9fZmllbGRcIiksXHJcbiAgc2VhcmNoUmVzdWx0RGl2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc3VsdHNcIiksXHJcbiAgc2VhcmNoUmVzdWx0TGlzdDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZXN1bHRzX19saXN0XCIpLFxyXG4gIHBhZ2VCdXR0b25zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc3VsdHNfX3BhZ2VzXCIpLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGVsZW1lbnRTdHJpbmdzID0ge1xyXG4gIGxvYWRlcjogXCJsb2FkZXJcIixcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhckxvYWRlciA9ICgpID0+IHtcclxuICBjb25zdCBsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtlbGVtZW50U3RyaW5ncy5sb2FkZXJ9YCk7XHJcblxyXG4gIGlmIChsb2FkZXIpIGxvYWRlci5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGxvYWRlcik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyTG9hZGVyID0gKHBhcmVudCkgPT4ge1xyXG4gIGNvbnN0IGxvYWRlciA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiJHtlbGVtZW50U3RyaW5ncy5sb2FkZXJ9XCI+XHJcbiAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY3dcIjwvdXNlPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICA8L2Rpdj5cclxuICBgO1xyXG5cclxuICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCBsb2FkZXIpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBlbGVtZW50cyB9IGZyb20gXCIuL2Jhc2VcIjtcclxuXHJcbi8vIHByaXZhdGUgZnVuY3Rpb25cclxuY29uc3QgcmVuZGVyUmVjaXBlID0gKHJlY2lwZSkgPT4ge1xyXG4gIGNvbnN0IG1hcmt1cCA9IGBcclxuICAgIDxsaT5cclxuICAgICAgICA8YSBjbGFzcz1cInJlc3VsdHNfX2xpbmtcIiBocmVmPVwiIyR7cmVjaXBlLnJlY2lwZV9pZH1cIj5cclxuICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz1cInJlc3VsdHNfX2ZpZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3JlY2lwZS5pbWFnZV91cmx9XCIgYWx0PVwiVGVzdFwiPlxyXG4gICAgICAgICAgICA8L2ZpZ3VyZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VsdHNfX2RhdGFcIj5cclxuICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInJlc3VsdHNfX25hbWVcIj4ke3JlY2lwZS50aXRsZX08L2g0PlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJyZXN1bHRzX19hdXRob3JcIj4ke3JlY2lwZS5wdWJsaXNoZXJ9PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2E+XHJcbiAgICA8L2xpPmA7XHJcblxyXG4gIC8vIHVsINGA0q/Sr9Cz0Y3RjSDQvdGN0LzQvdGNXHJcbiAgZWxlbWVudHMuc2VhcmNoUmVzdWx0TGlzdC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgbWFya3VwKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhclNlYXJjaFF1ZXJ5ID0gKCkgPT4ge1xyXG4gIGVsZW1lbnRzLnNlYXJjaElucHV0LnZhbHVlID0gXCJcIjtcclxufTtcclxuZXhwb3J0IGNvbnN0IGNsZWFyU2VhcmNoUmVzdWx0ID0gKCkgPT4ge1xyXG4gIGVsZW1lbnRzLnNlYXJjaFJlc3VsdExpc3QuaW5uZXJIVE1MID0gXCJcIjtcclxuICBlbGVtZW50cy5wYWdlQnV0dG9ucy5pbm5lckhUTUwgPSBcIlwiO1xyXG59O1xyXG5leHBvcnQgY29uc3QgZ2V0SW5wdXQgPSAoKSA9PiBlbGVtZW50cy5zZWFyY2hJbnB1dC52YWx1ZTtcclxuZXhwb3J0IGNvbnN0IHJlbmRlclJlY2lwZXMgPSAocmVjaXBlcywgY3VycmVudFBhZ2UgPSAxLCByZXNQZXJQYWdlID0gMTApID0+IHtcclxuICAvLyDQpdCw0LnQu9GC0YvQvSDSr9GAINC00q/QvdCzINGF0YPRg9C00LDRgdC70LDQtiDSr9C30q/Sr9C70Y3RhVxyXG4gIC8vIGN1cnJlbnRQYWdlID0gMiwgc3RhcnQgPSAxMCwgZW5kID0gMjBcclxuICBjb25zdCBzdGFydCA9IChjdXJyZW50UGFnZSAtIDEpICogcmVzUGVyUGFnZTtcclxuICBjb25zdCBlbmQgPSBjdXJyZW50UGFnZSAqIHJlc1BlclBhZ2U7XHJcblxyXG4gIHJlY2lwZXMuc2xpY2Uoc3RhcnQsIGVuZCkuZm9yRWFjaCgoZWwpID0+IHJlbmRlclJlY2lwZShlbCkpO1xyXG5cclxuICAvLyDQpdGD0YPQtNCw0YHQu9Cw0LvRgtGL0L0g0YLQvtCy0YfRg9GD0LTRi9CzINCz0LDRgNCz0LDQtiDQuNGA0Y3RhVxyXG4gIGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwocmVjaXBlcy5sZW5ndGggLyByZXNQZXJQYWdlKTtcclxuICByZW5kZXJCdXR0b25zKGN1cnJlbnRQYWdlLCB0b3RhbFBhZ2VzKTtcclxufTtcclxuXHJcbi8vIHR5cGUgPT09PiBcInByZXZcIiwgXCJuZXh0XCJcclxuY29uc3QgY3JlYXRlQnV0dG9uID0gKFxyXG4gIHBhZ2UsXHJcbiAgdHlwZSxcclxuICBkaXJlY3Rpb25cclxuKSA9PiBgPGJ1dHRvbiBjbGFzcz1cImJ0bi1pbmxpbmUgcmVzdWx0c19fYnRuLS0ke3R5cGV9XCIgZGF0YS1nb3RvPSR7cGFnZX0+XHJcbiAgPHN2ZyBjbGFzcz1cInNlYXJjaF9faWNvblwiPlxyXG4gICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tdHJpYW5nbGUtJHtkaXJlY3Rpb259XCI+PC91c2U+XHJcbiAgPC9zdmc+XHJcbiAgPHNwYW4+0KXRg9GD0LTQsNGBICR7cGFnZX08L3NwYW4+XHJcbiAgPC9idXR0b24+YDtcclxuXHJcbmNvbnN0IHJlbmRlckJ1dHRvbnMgPSAoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpID0+IHtcclxuICBsZXQgYnV0dG9uSHRtbDtcclxuXHJcbiAgaWYgKGN1cnJlbnRQYWdlID09PSAxICYmIHRvdGFsUGFnZXMgPiAxKSB7XHJcbiAgICAvLyAxLdGAINGF0YPRg9C00LDRgSDQtNGN0Y3RgCDQsdC90LAsIDIt0YAg0YXRg9GD0LTQsNGBINCz0Y3QtNGN0LMg0YLQvtCy0YfQuNC50LMg0LPQsNGA0LPQsFxyXG4gICAgYnV0dG9uSHRtbCA9IGNyZWF0ZUJ1dHRvbigyLCBcIm5leHRcIiwgXCJyaWdodFwiKTtcclxuICB9IGVsc2UgaWYgKGN1cnJlbnRQYWdlIDwgdG90YWxQYWdlcykge1xyXG4gICAgLy8g06jQvNC906nRhSDQsdC+0LvQvtC9INC00LDRgNCw0LDRh9C40LnQvSDRhdGD0YPQtNCw0YEg0YDRg9GDINGI0LjQu9C20LjRhSDRgtC+0LLRh9GD0YPQtNGL0LMg0q/Qt9Kv0q/Qu1xyXG4gICAgYnV0dG9uSHRtbCA9IGNyZWF0ZUJ1dHRvbihjdXJyZW50UGFnZSAtIDEsIFwicHJldlwiLCBcImxlZnRcIik7XHJcbiAgICBidXR0b25IdG1sICs9IGNyZWF0ZUJ1dHRvbihjdXJyZW50UGFnZSArIDEsIFwibmV4dFwiLCBcInJpZ2h0XCIpO1xyXG4gIH0gZWxzZSBpZiAoY3VycmVudFBhZ2UgPT09IHRvdGFsUGFnZXMpIHtcclxuICAgIC8vINCl0LDQvNCz0LjQudC9INGB0q/Sr9C70LjQudC9INGF0YPRg9C00LDRgSDQtNGN0Y3RgCDQsdC90LAuINOo0LzQvdOp0YUg0YDSr9KvINGI0LjQu9C20q/Sr9C70Y3RhSDRgtC+0LLRh9C40LnQsyDQuyDSr9C30q/Sr9C70L3RjVxyXG4gICAgYnV0dG9uSHRtbCA9IGNyZWF0ZUJ1dHRvbihjdXJyZW50UGFnZSAtIDEsIFwicHJldlwiLCBcImxlZnRcIik7XHJcbiAgfVxyXG5cclxuICBlbGVtZW50cy5wYWdlQnV0dG9ucy5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIGJ1dHRvbkh0bWwpO1xyXG59O1xyXG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWNpcGUge1xyXG4gIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgfVxyXG5cclxuICAvLyAgIFwicHVibGlzaGVyXCI6IFwiMTAxIENvb2tib29rc1wiLFxyXG4gIC8vICAgICBcImluZ3JlZGllbnRzXCI6IFtcclxuICAvLyAgICAgICBcIjQgMS8yIGN1cHMgKDIwLjI1IG91bmNlcykgdW5ibGVhY2hlZCBoaWdoLWdsdXRlbiwgYnJlYWQsIG9yIGFsbC1wdXJwb3NlIGZsb3VyLCBjaGlsbGVkXCIsXHJcbiAgLy8gICAgICAgXCIxIDMvNCAoLjQ0IG91bmNlKSB0ZWFzcG9vbnMgc2FsdFwiLFxyXG4gIC8vICAgICAgIFwiMSB0ZWFzcG9vbiAoLjExIG91bmNlKSBpbnN0YW50IHllYXN0XCIsXHJcbiAgLy8gICAgICAgXCIxLzQgY3VwICgyIG91bmNlcykgb2xpdmUgb2lsIChvcHRpb25hbClcIixcclxuICAvLyAgICAgICBcIjEgMy80IGN1cHMgKDE0IG91bmNlcykgd2F0ZXIsIGljZSBjb2xkICg0MEYpXCIsXHJcbiAgLy8gICAgICAgXCJTZW1vbGluYSBmbG91ciBPUiBjb3JubWVhbCBmb3IgZHVzdGluZ1wiXHJcbiAgLy8gICAgIF0sXHJcbiAgLy8gICAgIFwic291cmNlX3VybFwiOiBcImh0dHA6Ly93d3cuMTAxY29va2Jvb2tzLmNvbS9hcmNoaXZlcy8wMDExOTkuaHRtbFwiLFxyXG4gIC8vICAgICBcInJlY2lwZV9pZFwiOiBcIjQ3NzQ2XCIsXHJcbiAgLy8gICAgIFwiaW1hZ2VfdXJsXCI6IFwiaHR0cDovL2ZvcmtpZnktYXBpLmhlcm9rdWFwcC5jb20vaW1hZ2VzL2Jlc3RfcGl6emFfZG91Z2hfcmVjaXBlMWIyMC5qcGdcIixcclxuICAvLyAgICAgXCJzb2NpYWxfcmFua1wiOiAxMDAsXHJcbiAgLy8gICAgIFwicHVibGlzaGVyX3VybFwiOiBcImh0dHA6Ly93d3cuMTAxY29va2Jvb2tzLmNvbVwiLFxyXG4gIC8vICAgICBcInRpdGxlXCI6IFwiQmVzdCBQaXp6YSBEb3VnaCBFdmVyXCJcclxuICBhc3luYyBnZXRSZWNpcGUoKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBheGlvcyhcclxuICAgICAgXCJodHRwczovL2ZvcmtpZnktYXBpLmhlcm9rdWFwcC5jb20vYXBpL2dldD9ySWQ9XCIgKyB0aGlzLmlkXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMucHVibGlzaGVyID0gcmVzdWx0LmRhdGEucmVjaXBlLnB1Ymxpc2hlcjtcclxuICAgIHRoaXMuaW5ncmVkaWVudHMgPSByZXN1bHQuZGF0YS5yZWNpcGUuaW5ncmVkaWVudHM7XHJcbiAgICB0aGlzLnNvdXJjZV91cmwgPSByZXN1bHQuZGF0YS5yZWNpcGUuc291cmNlX3VybDtcclxuICAgIHRoaXMucmVjaXBlX2lkID0gcmVzdWx0LmRhdGEucmVjaXBlLnJlY2lwZV9pZDtcclxuICAgIHRoaXMuaW1hZ2VfdXJsID0gcmVzdWx0LmRhdGEucmVjaXBlLmltYWdlX3VybDtcclxuICAgIHRoaXMucHVibGlzaGVyX3VybCA9IHJlc3VsdC5kYXRhLnJlY2lwZS5wdWJsaXNoZXJfdXJsO1xyXG4gICAgdGhpcy50aXRsZSA9IHJlc3VsdC5kYXRhLnJlY2lwZS50aXRsZTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMudGl0bGUpO1xyXG4gICAgY29uc29sZS5sb2codGhpcy5pbmdyZWRpZW50cyk7XHJcbiAgfVxyXG59XHJcbiIsInJlcXVpcmUoXCJAYmFiZWwvcG9seWZpbGxcIik7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSBcIi4vbW9kZWwvU2VhcmNoXCI7XHJcbmltcG9ydCB7IGVsZW1lbnRzLCByZW5kZXJMb2FkZXIsIGNsZWFyTG9hZGVyIH0gZnJvbSBcIi4vdmlldy9iYXNlXCI7XHJcbmltcG9ydCAqIGFzIHNlYXJjaFZpZXcgZnJvbSBcIi4vdmlldy9zZWFyY2hWaWV3XCI7XHJcbmltcG9ydCBSZWNpcGUgZnJvbSBcIi4vbW9kZWwvUmVjaXBlXCI7XHJcblxyXG4vKipcclxuICogV2ViIGFwcCDRgtOp0LvTqdCyXHJcbiAqIC0g0KXQsNC50LvRgtGL0L0gcXVlcnksINKv0YAg0LTSr9C9XHJcbiAqIC0g0KLRg9GF0LDQudC9INKv0LfSr9Kv0LvQtiDQsdCw0LnQs9Cw0LAg0LbQvtGAXHJcbiAqIC0g0JvQsNC50LrQu9Cw0YHQsNC9INC20L7RgNGD0YPQtFxyXG4gKiAtINCX0LDRhdC40LDQu9C2INCx0LDQudCz0LDQsCDQttC+0YDRi9C9INC90LDQudGA0LvQsNCz0YPRg9C0XHJcbiAqL1xyXG5cclxuY29uc3Qgc3RhdGUgPSB7fTtcclxuXHJcbmNvbnN0IGNvbnRyb2xTZWFyY2ggPSBhc3luYyAoKSA9PiB7XHJcbiAgLy8gMSkg0JLQtdCx0Y3RjdGBINGF0LDQudC70YLRi9C9INGC0q/Qu9GF0q/Sr9GAINKv0LPQuNC50LMg0LPQsNGA0LPQsNC2INCw0LLQvdCwLlxyXG4gIGNvbnN0IHF1ZXJ5ID0gc2VhcmNoVmlldy5nZXRJbnB1dCgpO1xyXG5cclxuICBpZiAocXVlcnkpIHtcclxuICAgIC8vIDIpINCo0LjQvdGN0Y3RgCDRhdCw0LnQu9GC0YvQvSDQvtCx0YrQtdC60YLRi9CzINKv0q/RgdCz0Y3QtiDTqdCz0L3TqS5cclxuICAgIHN0YXRlLnNlYXJjaCA9IG5ldyBTZWFyY2gocXVlcnkpO1xyXG5cclxuICAgIC8vIDMpINCl0LDQudC70YIg0YXQuNC50YXRjdC0INC30L7RgNC40YPQu9C2INC00Y3Qu9Cz0Y3RhtC40LnQsyBVSSDQsdGN0LvRgtCz0Y3QvdGNLlxyXG4gICAgc2VhcmNoVmlldy5jbGVhclNlYXJjaFF1ZXJ5KCk7XHJcbiAgICBzZWFyY2hWaWV3LmNsZWFyU2VhcmNoUmVzdWx0KCk7XHJcbiAgICByZW5kZXJMb2FkZXIoZWxlbWVudHMuc2VhcmNoUmVzdWx0RGl2KTtcclxuXHJcbiAgICAvLyA0KSDQpdCw0LnQu9GC0YvQsyDQs9Kv0LnRhtGN0YLQs9GN0L3RjS5cclxuICAgIGF3YWl0IHN0YXRlLnNlYXJjaC5kb1NlYXJjaCgpO1xyXG5cclxuICAgIC8vIDUpINCl0LDQudC70YLRi9C9INKv0YAg0LTSr9C90LMg0LTRjdC70LPRjdGG0Y3QvdC0INKv0LfSr9Kv0LvQvdGNLlxyXG4gICAgY2xlYXJMb2FkZXIoKTtcclxuICAgIGlmIChzdGF0ZS5zZWFyY2gucmVzdWx0ID09PSB1bmRlZmluZWQpIGFsZXJ0KFwi0KXQsNC50LvRgtCw0LDRgCDQuNC70Y3RgNGG0LPSr9C5Li4uXCIpO1xyXG4gICAgZWxzZSBzZWFyY2hWaWV3LnJlbmRlclJlY2lwZXMoc3RhdGUuc2VhcmNoLnJlc3VsdCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZWxlbWVudHMuc2VhcmNoRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGNvbnRyb2xTZWFyY2goKTtcclxufSk7XHJcblxyXG5lbGVtZW50cy5wYWdlQnV0dG9ucy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICBjb25zdCBidG4gPSBlLnRhcmdldC5jbG9zZXN0KFwiLmJ0bi1pbmxpbmVcIik7XHJcblxyXG4gIGlmIChidG4pIHtcclxuICAgIGNvbnN0IGdvdG9QYWdlTnVtYmVyID0gcGFyc2VJbnQoYnRuLmRhdGFzZXQuZ290bywgMTApO1xyXG4gICAgc2VhcmNoVmlldy5jbGVhclNlYXJjaFJlc3VsdCgpO1xyXG4gICAgc2VhcmNoVmlldy5yZW5kZXJSZWNpcGVzKHN0YXRlLnNlYXJjaC5yZXN1bHQsIGdvdG9QYWdlTnVtYmVyKTtcclxuICB9XHJcbn0pO1xyXG5cclxuY29uc3QgciA9IG5ldyBSZWNpcGUoNDc3NDYpO1xyXG5yLmdldFJlY2lwZSgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9